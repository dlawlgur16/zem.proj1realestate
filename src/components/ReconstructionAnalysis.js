import React, { useState, useEffect, useCallback } from 'react';
import { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import importedData from '../data.js';
import FileUpload from './FileUpload';
import './FileUpload.css';
import Papa from 'papaparse';

export default function ReconstructionAnalysis() {
  const [activeTab, setActiveTab] = useState('Ï†ÑÏ≤¥ÌÜµÍ≥Ñ');
  const [csvData, setCsvData] = useState([]);
  const [statsData, setStatsData] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showUpload, setShowUpload] = useState(false);
  const [availableFiles, setAvailableFiles] = useState([]);
  const [currentFileName, setCurrentFileName] = useState('');
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [selectedAgeGroup, setSelectedAgeGroup] = useState('Ï†ÑÏ≤¥');
  const [selectedAgeGroupOwnership, setSelectedAgeGroupOwnership] = useState('Ï†ÑÏ≤¥');
  const [selectedAgeGroupReason, setSelectedAgeGroupReason] = useState('Ï†ÑÏ≤¥');
  const [selectedAgeGroupArea, setSelectedAgeGroupArea] = useState('Ï†ÑÏ≤¥');
  const [selectedAgeGroupLoan, setSelectedAgeGroupLoan] = useState('Ï†ÑÏ≤¥');

  // CSV ÌååÏùº ÏûêÎèô Î°úÎìú
  const loadCsvFile = useCallback(async (fileName) => {
    // CSV Îç∞Ïù¥ÌÑ∞Î•º Ï∞®Ìä∏Ïö© Îç∞Ïù¥ÌÑ∞Î°ú Î≥ÄÌôòÌïòÎäî ÎÇ¥Î∂Ä Ìï®Ïàò
    const processData = (data) => {
      // ÎèôÎ≥Ñ ÌÉ≠ ÏÉùÏÑ± (1Îèô, 2Îèô, 3Îèô, 4Îèô)
    const processedData = {
      'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ': processBuildingData(data, null),
      'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô': processBuildingData(data, '1Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô': processBuildingData(data, '2Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô': processBuildingData(data, '3Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô': processBuildingData(data, '4Îèô')
    };

    setStatsData(processedData);
    };
    
    try {
      setLoading(true);
      setError('');
      
      const response = await fetch(`/data/${fileName}`);
      if (!response.ok) {
        throw new Error('ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      
      const csvText = await response.text();
      
      Papa.parse(csvText, {
        header: true,
        complete: (results) => {
          console.log(`Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: ${results.data.length}`);
          setCsvData(results.data);
          processData(results.data);
          setCurrentFileName(fileName);
          setLoading(false);
        },
        error: (error) => {
          console.error('CSV ÌååÏã± Ïò§Î•ò:', error);
          setError('CSV ÌååÏùºÏùÑ ÏùΩÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
          setLoading(false);
        }
      });
    } catch (error) {
      console.error('ÌååÏùº Î°úÎìú Ïò§Î•ò:', error);
      setError('ÌååÏùºÏùÑ Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
      setLoading(false);
    }
  }, []);

  // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú CSV ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAvailableFiles = useCallback(async () => {
    try {
      // ÌååÏùº Î™©Î°ù JSON Í∞ÄÏ†∏Ïò§Í∏∞
      const response = await fetch('/data/file-list.json');
      if (response.ok) {
        const data = await response.json();
        setAvailableFiles(data.files);
        if (data.files.length > 0 && !currentFileName) {
          setCurrentFileName(data.files[0]);
          // Ï≤´ Î≤àÏß∏ ÌååÏùº ÏûêÎèô Î°úÎìú
          await loadCsvFile(data.files[0]);
        }
      } else {
        // Î∞±ÏóÖ: Í∏∞Î≥∏ ÌååÏùº ÌôïÏù∏
        const defaultResponse = await fetch('/data/data.csv');
        if (defaultResponse.ok) {
          setAvailableFiles(['data.csv']);
          setCurrentFileName('data.csv');
        }
      }
    } catch (error) {
      console.log('Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÌååÏùºÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.');
      setAvailableFiles(['data.csv']);
      setCurrentFileName('data.csv');
    }
  }, [currentFileName, loadCsvFile]);
  // Ïó∞Î†πÎåÄÎ≥Ñ Îç∞Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
  const filterDataByAge = useCallback((data, ageGroup) => {
    if (ageGroup === 'Ï†ÑÏ≤¥') return data;
    
    return data.filter(row => {
      const jumin = row['Ï£ºÎØºÎ≤àÌò∏'] || '';
      if (jumin.length < 7) return false;
      
      const birthYear = parseInt(jumin.substring(0, 2));
      const currentYear = new Date().getFullYear();
      const age = currentYear - (birthYear > 50 ? 1900 + birthYear : 2000 + birthYear);
      
      switch (ageGroup) {
        case '20ÎåÄ': return age >= 20 && age < 30;
        case '30ÎåÄ': return age >= 30 && age < 40;
        case '40ÎåÄ': return age >= 40 && age < 50;
        case '50ÎåÄ': return age >= 50 && age < 60;
        case '60ÎåÄ': return age >= 60 && age < 70;
        case '70ÎåÄ': return age >= 70 && age < 80;
        case '80ÎåÄ': return age >= 80 && age < 90;
        case '90ÎåÄ': return age >= 90;
        default: return true;
      }
    });
  }, []);

  // Ïó∞Î†πÎåÄÎ≥Ñ Í±∞Ï£º/Ìà¨Ïûê ÎπÑÏú® Í≥ÑÏÇ∞
  const getAgeGroupResidenceData = useCallback((data, ageGroup) => {
    const filteredData = filterDataByAge(data, ageGroup);
    const total = filteredData.length;
    
    if (total === 0) {
      return {
        total: 0,
        residence: 0,
        investment: 0,
        residenceRate: 0,
        investmentRate: 0
      };
    }
    
    const residence = filteredData.filter(row => 
      row['Ïã§Í±∞Ï£ºÏó¨Î∂Ä'] === 'Ïã§Í±∞Ï£º Ï∂îÏ†ï' || 
      row['Ïã§Í±∞Ï£ºÏó¨Î∂Ä'] === 'Ïã§Í±∞Ï£º'
    ).length;
    
    const investment = total - residence;
    
    return {
      total,
      residence,
      investment,
      residenceRate: total > 0 ? (residence / total * 100).toFixed(1) : 0,
      investmentRate: total > 0 ? (investment / total * 100).toFixed(1) : 0
    };
  }, [filterDataByAge]);


  // ÌååÏùº ÏóÖÎ°úÎìú Ìï∏Îì§Îü¨
  const handleDataLoad = (data) => {
    console.log('ÏóÖÎ°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Í∞úÏàò:', data.length);
    setCsvData(data);
    
    // ÎèôÎ≥Ñ ÌÉ≠ ÏÉùÏÑ± (1Îèô, 2Îèô, 3Îèô, 4Îèô)
    const processedData = {
      'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ': processBuildingData(data, null),
      'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô': processBuildingData(data, '1Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô': processBuildingData(data, '2Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô': processBuildingData(data, '3Îèô'),
      'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô': processBuildingData(data, '4Îèô')
    };
    setStatsData(processedData);
    
    setLoading(false);
    setError('');
    setShowUpload(false);
    
    // ÏóÖÎ°úÎìúÎêú ÌååÏùºÏùÑ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌååÏùº Î™©Î°ùÏóê Ï∂îÍ∞Ä
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const newFileName = `uploaded-${timestamp}.csv`;
    setAvailableFiles(prev => [...prev, newFileName]);
    setCurrentFileName(newFileName);
  };

  // ÏóêÎü¨ Ìï∏Îì§Îü¨
  const handleError = (errorMessage) => {
    setError(errorMessage);
    setLoading(false);
  };

    // AI Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ìï∏Îì§Îü¨
    const handleGenerateReport = async () => {
      // API ÌÇ§ ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞)
      const apiKey = process.env.REACT_APP_GEMINI_API_KEY;
      
      // API ÌÇ§ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
      if (!apiKey || apiKey.length < 30) {
        console.error('‚ùå API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
        alert('‚ö†Ô∏è API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Google AI StudioÏóêÏÑú ÏÉàÎ°úÏö¥ API ÌÇ§Î•º Î∞úÍ∏âÎ∞õÏïÑÏ£ºÏÑ∏Ïöî.');
        return;
      }
      
      // ÎîîÎ≤ÑÍπÖ: API ÌÇ§ ÌôïÏù∏
      console.log('üîç API ÌÇ§ ÎîîÎ≤ÑÍπÖ:');
      console.log('- process.env.REACT_APP_GEMINI_API_KEY:', process.env.REACT_APP_GEMINI_API_KEY);
      console.log('- window.REACT_APP_GEMINI_API_KEY:', window.REACT_APP_GEMINI_API_KEY);
      console.log('- apiKey Î≥ÄÏàò:', apiKey);
      console.log('- apiKey ÌÉÄÏûÖ:', typeof apiKey);
      console.log('- apiKey Í∏∏Ïù¥:', apiKey ? apiKey.length : 'undefined');
      
      if (!apiKey || apiKey === 'undefined') {
        alert('‚ö†Ô∏è API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
      }
      
      // API ÌÇ§Í∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
      if (apiKey.length < 30) {
        alert('‚ö†Ô∏è API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\n\nGoogle AI Studio (https://aistudio.google.com)ÏóêÏÑú ÏÉàÎ°úÏö¥ API ÌÇ§Î•º Î∞úÍ∏âÎ∞õÏïÑÏ£ºÏÑ∏Ïöî.');
        return;
      }

    setIsGeneratingReport(true);
    
    try {
      console.log('üöÄ AI Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏãúÏûë...');
      // Gemini APIÎ•º ÏÇ¨Ïö©Ìïú Ï†ÑÎ¨∏Ï†ÅÏù∏ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
      const reportContent = await generateSimpleReport(statsData, activeTab, csvData, apiKey);
      console.log('‚úÖ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å');
      
      // Î≥¥Í≥†ÏÑúÎ•º ÏÉà Ï∞ΩÏóêÏÑú ÌëúÏãú
      const newWindow = window.open('', '_blank', 'width=1000,height=800');
      newWindow.document.write(`
        <html>
          <head>
            <title>AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú - ${activeTab}</title>
            <style>
              body { 
                font-family: 'Segoe UI', 'Malgun Gothic', 'Apple SD Gothic Neo', -apple-system, BlinkMacSystemFont, sans-serif; 
                margin: 0; 
                padding: 0; 
                line-height: 1.7; 
                color: #2d3748;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .container {
                max-width: 1200px;
                margin: 20px auto;
                background: white;
                padding: 0;
                border-radius: 16px;
                box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
                overflow: hidden;
              }
              .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 40px;
                text-align: center;
                position: relative;
              }
              .header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
                opacity: 0.3;
              }
              .header h1 {
                position: relative;
                z-index: 1;
                margin: 0;
                font-size: 2.5em;
                font-weight: 700;
                text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                letter-spacing: -0.5px;
              }
              .content {
                padding: 40px;
              }
              h1 { 
                color: #1a202c; 
                border-bottom: none;
                padding-bottom: 0;
                margin-bottom: 0;
                font-size: 2.5em;
                font-weight: 700;
              }
              h2 { 
                color: #2d3748; 
                margin-top: 40px;
                margin-bottom: 25px;
                border-left: none;
                padding-left: 0;
                font-size: 1.8em;
                font-weight: 700;
                border-bottom: 3px solid #667eea;
                padding-bottom: 10px;
                position: relative;
              }
              h2::before {
                content: '';
                position: absolute;
                bottom: -3px;
                left: 0;
                width: 60px;
                height: 3px;
                background: linear-gradient(90deg, #667eea, #764ba2);
                border-radius: 2px;
              }
              h3 { 
                color: #4a5568; 
                margin-top: 30px;
                margin-bottom: 15px;
                font-size: 1.4em;
                font-weight: 600;
                color: #667eea;
              }
              h4 {
                color: #2d3748;
                margin-top: 25px;
                margin-bottom: 15px;
                font-size: 1.2em;
                font-weight: 600;
                color: #667eea;
              }
              p {
                margin-bottom: 18px;
                text-align: justify;
                font-size: 16px;
              }
              ul, ol {
                margin-bottom: 20px;
                padding-left: 30px;
              }
              li {
                margin-bottom: 10px;
                position: relative;
              }
              ul li::marker {
                color: #667eea;
                font-weight: bold;
              }
              .stats { 
                background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%); 
                padding: 25px; 
                border-radius: 12px; 
                margin: 20px 0; 
                border-left: 6px solid #667eea; 
                box-shadow: 0 4px 8px rgba(0,0,0,0.05);
                position: relative;
              }
              .stats::before {
                content: 'üìä';
                position: absolute;
                top: 20px;
                right: 20px;
                font-size: 1.3em;
              }
              .highlight { 
                background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 100%); 
                padding: 25px; 
                border-radius: 12px; 
                margin: 20px 0; 
                border-left: 6px solid #38b2ac; 
                box-shadow: 0 8px 16px rgba(56, 178, 172, 0.1);
                position: relative;
              }
              .highlight::before {
                content: 'üí°';
                position: absolute;
                top: 20px;
                right: 20px;
                font-size: 1.5em;
              }
              .insight {
                background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
                padding: 20px;
                border-radius: 12px;
                margin: 20px 0;
                border-left: 6px solid #f56565;
                box-shadow: 0 4px 8px rgba(245, 101, 101, 0.1);
                position: relative;
              }
              .insight::before {
                content: '‚ö†Ô∏è';
                position: absolute;
                top: 20px;
                right: 20px;
                font-size: 1.3em;
              }
              table {
                width: 100%;
                border-collapse: collapse;
                margin: 25px 0;
                border-radius: 12px;
                overflow: hidden;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
              }
              th, td {
                border: 1px solid #e2e8f0;
                padding: 15px;
                text-align: left;
                font-size: 15px;
              }
              th {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                font-size: 14px;
              }
              tr:nth-child(even) {
                background: #f8fafc;
              }
              tr:hover {
                background: #e6fffa;
                transition: background 0.3s ease;
              }
              .footer {
                margin-top: 50px;
                padding: 30px 40px;
                border-top: 2px solid #e2e8f0;
                color: #718096;
                font-size: 14px;
                background: #f8fafc;
                text-align: center;
              }
              .report-source {
                background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
                border: 2px solid #0ea5e9;
                border-radius: 12px;
                padding: 15px 20px;
                margin: 20px 0;
                font-weight: 600;
                color: #0369a1;
                text-align: center;
                box-shadow: 0 4px 8px rgba(14, 165, 233, 0.1);
              }
              pre {
                background: #1a202c;
                color: #e2e8f0;
                padding: 20px;
                border-radius: 12px;
                overflow-x: auto;
                white-space: pre-wrap;
                border: 1px solid #2d3748;
                font-family: 'Fira Code', 'Courier New', monospace;
                font-size: 14px;
                line-height: 1.5;
              }
              .section-divider {
                height: 2px;
                background: linear-gradient(90deg, transparent, #667eea, transparent);
                margin: 40px 0;
                border-radius: 1px;
              }
              .metric-card {
                background: white;
                border: 1px solid #e2e8f0;
                border-radius: 12px;
                padding: 20px;
                margin: 15px 0;
                box-shadow: 0 4px 8px rgba(0,0,0,0.05);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
              }
              .metric-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 16px rgba(0,0,0,0.1);
              }
              .metric-value {
                font-size: 2em;
                font-weight: 700;
                color: #667eea;
                margin-bottom: 5px;
              }
              .metric-label {
                color: #718096;
                font-size: 14px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
              }
              .dashboard-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin: 30px 0;
              }
              .kpi-card {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 25px;
                border-radius: 16px;
                text-align: center;
                box-shadow: 0 8px 16px rgba(102, 126, 234, 0.3);
                position: relative;
                overflow: hidden;
              }
              .kpi-card::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -50%;
                width: 100%;
                height: 100%;
                background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
                transform: rotate(45deg);
              }
              .kpi-value {
                font-size: 3em;
                font-weight: 800;
                margin-bottom: 10px;
                text-shadow: 0 2px 4px rgba(0,0,0,0.3);
                position: relative;
                z-index: 1;
              }
              .kpi-label {
                font-size: 1.1em;
                font-weight: 600;
                opacity: 0.9;
                position: relative;
                z-index: 1;
              }
              .kpi-description {
                font-size: 0.9em;
                opacity: 0.8;
                margin-top: 10px;
                position: relative;
                z-index: 1;
              }
              .comparison-card {
                background: white;
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                padding: 20px;
                margin: 15px 0;
                box-shadow: 0 4px 8px rgba(0,0,0,0.05);
                position: relative;
              }
              .comparison-card.positive {
                border-left: 6px solid #48bb78;
                background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%);
              }
              .comparison-card.warning {
                border-left: 6px solid #ed8936;
                background: linear-gradient(135deg, #fffaf0 0%, #fbd38d 100%);
              }
              .comparison-card.negative {
                border-left: 6px solid #f56565;
                background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
              }
              .comparison-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
              }
              .comparison-title {
                font-size: 1.2em;
                font-weight: 600;
                color: #2d3748;
              }
              .comparison-icon {
                font-size: 1.5em;
              }
              .comparison-value {
                font-size: 2.2em;
                font-weight: 700;
                color: #2d3748;
                margin-bottom: 5px;
              }
              .comparison-percentage {
                font-size: 1.1em;
                font-weight: 600;
                margin-bottom: 10px;
              }
              .comparison-description {
                font-size: 0.95em;
                color: #4a5568;
                line-height: 1.5;
              }
              .insight-box {
                background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 100%);
                border-left: 6px solid #38b2ac;
                padding: 20px;
                border-radius: 12px;
                margin: 20px 0;
                position: relative;
              }
              .insight-box::before {
                content: 'üí°';
                position: absolute;
                top: 15px;
                right: 15px;
                font-size: 1.5em;
              }
              .insight-title {
                font-size: 1.1em;
                font-weight: 600;
                color: #2d3748;
                margin-bottom: 10px;
              }
              .insight-content {
                color: #4a5568;
                line-height: 1.6;
              }
              .chart-container {
                background: white;
                border-radius: 12px;
                padding: 25px;
                margin: 20px 0;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                border: 1px solid #e2e8f0;
              }
              .chart-title {
                font-size: 1.3em;
                font-weight: 600;
                color: #2d3748;
                margin-bottom: 20px;
                text-align: center;
                border-bottom: 2px solid #667eea;
                padding-bottom: 10px;
              }
              .progress-bar {
                background: #e2e8f0;
                border-radius: 10px;
                height: 20px;
                margin: 15px 0;
                overflow: hidden;
                position: relative;
              }
              .progress-fill {
                height: 100%;
                border-radius: 10px;
                transition: width 0.3s ease;
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: 600;
                font-size: 12px;
              }
              .progress-fill.positive {
                background: linear-gradient(90deg, #48bb78, #38a169);
              }
              .progress-fill.warning {
                background: linear-gradient(90deg, #ed8936, #dd6b20);
              }
              .progress-fill.negative {
                background: linear-gradient(90deg, #f56565, #e53e3e);
              }
              .progress-fill.neutral {
                background: linear-gradient(90deg, #667eea, #764ba2);
              }
              .chart-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
              }
              .chart-item {
                background: #f8fafc;
                border-radius: 8px;
                padding: 15px;
                text-align: center;
                border: 1px solid #e2e8f0;
              }
              .chart-item-value {
                font-size: 2em;
                font-weight: 700;
                color: #2d3748;
                margin-bottom: 5px;
              }
              .chart-item-label {
                color: #718096;
                font-size: 14px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
              }
              .visual-section {
                background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
                border-radius: 12px;
                padding: 25px;
                margin: 25px 0;
                border-left: 6px solid #667eea;
              }
              .visual-title {
                font-size: 1.4em;
                font-weight: 600;
                color: #2d3748;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
              }
              .visual-title::before {
                content: 'üìä';
                margin-right: 10px;
                font-size: 1.2em;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>ü§ñ AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú - ${activeTab}</h1>
                <div class="report-source">
                  ${reportContent.includes('‚ö†Ô∏è **Ï£ºÏùò**: Ïù¥ Î≥¥Í≥†ÏÑúÎäî Gemini API Ïó∞Í≤∞ Ïã§Ìå®') ? 
                    'üìù Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø Î≥¥Í≥†ÏÑú (Gemini API Ïó∞Í≤∞ Ïã§Ìå®)' : 
                    'ü§ñ Gemini AI ÏÉùÏÑ± Î≥¥Í≥†ÏÑú'}
                </div>
              </div>
              <div class="content">
                <div style="white-space: pre-wrap; font-size: 16px; line-height: 1.8;">${reportContent}</div>
              </div>
              <div class="footer">
                <p><strong>Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏãúÍ∞Ñ:</strong> ${new Date().toLocaleString()}</p>
                <p><strong>Î∂ÑÏÑù ÎåÄÏÉÅ:</strong> ${activeTab}</p>
                <p><em>Ïù¥ Î≥¥Í≥†ÏÑúÎäî Google Gemini AIÍ∞Ä ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìïú Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§ÄÏùò Î∂ÑÏÑù Í≤∞Í≥ºÏûÖÎãàÎã§.</em></p>
              </div>
            </div>
          </body>
        </html>
      `);
      newWindow.document.close();
      
    } catch (error) {
      console.error('Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®:', error);
      console.error('ÏóêÎü¨ ÏÉÅÏÑ∏:', error.stack);
      
      // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î™ÖÌôïÌïú ÏïàÎÇ¥ Ï†úÍ≥µ
      if (error.message.includes('API ÌÇ§')) {
        alert(`‚ö†Ô∏è Gemini API Ïó∞Í≤∞ Ïã§Ìå®\n\n${error.message}\n\nüîß Ìï¥Í≤∞ Î∞©Î≤ï:\n1. https://aistudio.google.com Î∞©Î¨∏\n2. "Get API Key" ÌÅ¥Î¶≠\n3. ÏÉà API ÌÇ§ ÏÉùÏÑ±\n4. ÏΩîÎìúÏùò API ÌÇ§ Î∂ÄÎ∂ÑÏùÑ ÏÉà ÌÇ§Î°ú ÍµêÏ≤¥\n\nÌòÑÏû¨Îäî Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§Ä Fallback Î≥¥Í≥†ÏÑúÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§.`);
      } else {
        alert('Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
      }
    } finally {
      setIsGeneratingReport(false);
    }
  };

  // Ï†ÑÎ¨∏Ï†ÅÏù∏ AI Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ìï®Ïàò
    // CSV Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Ïã§Ï†ú ÌÜµÍ≥Ñ ÏÉùÏÑ±
    const generateActualStats = (csvData) => {
        if (!csvData || csvData.length === 0) return {};
        
        const stats = {
            totalCount: csvData.length,
            Ïù¥Ï†ÑÏÇ¨Ïú†: {},
            Ï†ÑÏö©Î©¥Ï†Å: {},
            Î≥¥Ïú†Í∏∞Í∞Ñ: {},
            ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥: {},
            Ïó∞Î†πÎåÄ: {},
            Í±∞Ï£ºÏßÄ: {}
        };
        
        // Ïù¥Ï†ÑÏÇ¨Ïú† Î∂ÑÏÑù
        csvData.forEach(row => {
            const reason = row['Ïù¥Ï†ÑÏÇ¨Ïú†'] || 'ÎØ∏Î∂ÑÎ•ò';
            stats.Ïù¥Ï†ÑÏÇ¨Ïú†[reason] = (stats.Ïù¥Ï†ÑÏÇ¨Ïú†[reason] || 0) + 1;
        });
        
        // Ï†ÑÏö©Î©¥Ï†Å Î∂ÑÏÑù (Ïã§Ï†ú Î©¥Ï†ÅÍ∞íÏúºÎ°ú)
        csvData.forEach(row => {
            const area = parseFloat(row['Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞']) || 0;
            if (area > 0) {
                const areaKey = `${area}„é°`;
                stats.Ï†ÑÏö©Î©¥Ï†Å[areaKey] = (stats.Ï†ÑÏö©Î©¥Ï†Å[areaKey] || 0) + 1;
            }
        });
        
        // Î≥¥Ïú†Í∏∞Í∞Ñ Î∂ÑÏÑù
        csvData.forEach(row => {
            const years = parseInt(row['Î≥¥Ïú†Í∏∞Í∞Ñ_ÎÖÑ']) || 0;
            let periodGroup = '';
            if (years < 5) periodGroup = '5ÎÖÑ ÎØ∏Îßå';
            else if (years < 10) periodGroup = '5ÎÖÑ~10ÎÖÑ';
            else periodGroup = '10ÎÖÑ Ïù¥ÏÉÅ';
            
            stats.Î≥¥Ïú†Í∏∞Í∞Ñ[periodGroup] = (stats.Î≥¥Ïú†Í∏∞Í∞Ñ[periodGroup] || 0) + 1;
        });
        
        // ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥ Î∂ÑÏÑù
        csvData.forEach(row => {
            const seizure = row['ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥'] || 'N';
            stats.ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥[seizure] = (stats.ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥[seizure] || 0) + 1;
        });
        
        // Ïó∞Î†πÎåÄ Î∂ÑÏÑù (Ï£ºÎØºÎ≤àÌò∏ Í∏∞Î∞ò)
        csvData.forEach(row => {
            const jumin = row['Ï£ºÎØºÎ≤àÌò∏'] || '';
            if (jumin.length >= 7) {
                const birthYear = parseInt(jumin.substring(0, 2));
                const currentYear = new Date().getFullYear();
                const age = currentYear - (birthYear > 50 ? 1900 + birthYear : 2000 + birthYear);
                
                let ageGroup = '';
                if (age < 30) ageGroup = '20ÎåÄ';
                else if (age < 40) ageGroup = '30ÎåÄ';
                else if (age < 50) ageGroup = '40ÎåÄ';
                else if (age < 60) ageGroup = '50ÎåÄ';
                else ageGroup = '60ÎåÄ Ïù¥ÏÉÅ';
                
                stats.Ïó∞Î†πÎåÄ[ageGroup] = (stats.Ïó∞Î†πÎåÄ[ageGroup] || 0) + 1;
            }
        });
        
        // Í±∞Ï£ºÏßÄ Î∂ÑÏÑù
        csvData.forEach(row => {
            const address = row['ÌòÑÏ£ºÏÜå'] || '';
            let region = 'Í∏∞ÌÉÄ';
            if (address.includes('ÏÑúÏö∏Ïãú')) {
                if (address.includes('Í∞ïÎ∂ÅÍµ¨')) region = 'ÏÑúÏö∏ Í∞ïÎ∂ÅÍµ¨';
                else if (address.includes('ÏùÄÌèâÍµ¨')) region = 'ÏÑúÏö∏ ÏùÄÌèâÍµ¨';
                else if (address.includes('ÏòÅÎì±Ìè¨Íµ¨')) region = 'ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨';
                else region = 'ÏÑúÏö∏ Í∏∞ÌÉÄ';
            } else if (address.includes('Í≤ΩÍ∏∞ÎèÑ')) {
                region = 'Í≤ΩÍ∏∞ÎèÑ';
            }
            
            stats.Í±∞Ï£ºÏßÄ[region] = (stats.Í±∞Ï£ºÏßÄ[region] || 0) + 1;
        });
        
        return stats;
    };

    const generateSimpleReport = async (statsData, activeTab, csvData, apiKey) => {
        console.log('ü§ñ Gemini API Ìò∏Ï∂ú ÏãúÏûë...');
        console.log('üìä API ÌÇ§ ÌôïÏù∏:', apiKey ? 'ÏÑ§Ï†ïÎê®' : 'ÎØ∏ÏÑ§Ï†ï');
        
        // Ïã§Ï†ú CSV Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ ÏÉùÏÑ±
        const actualStats = generateActualStats(csvData);
        console.log('üìä Ïã§Ï†ú CSV ÌÜµÍ≥Ñ:', actualStats);
        
        // Gemini APIÎ•º ÏÇ¨Ïö©Ìïú Ï†ÑÎ¨∏Ï†ÅÏù∏ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
        try {
                const prompt = `ÎãπÏã†ÏùÄ 20ÎÖÑ Í≤ΩÎ†•Ïùò Î∂ÄÎèôÏÇ∞ Ïû¨Í±¥Ï∂ï Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Îã§Ïùå Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÏó¨ ÏãúÍ≥µÏÇ¨Í∞Ä Î∞îÎ°ú ÌôúÏö©Ìï† Ïàò ÏûàÎäî Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Î¨¥Ï†ÅÏù∏ Î∂ÑÏÑù Î≥¥Í≥†ÏÑúÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

## üìä Ïã§Ï†ú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞
**Î∂ÑÏÑù ÎåÄÏÉÅ:** ${activeTab}
**Ï¥ù ÏÑ∏ÎåÄÏàò:** ${statsData[activeTab]?.total || 0}ÏÑ∏ÎåÄ
**Ïã§Í±∞Ï£º ÏÑ∏ÎåÄ:** ${statsData[activeTab]?.residenceCount || 0}ÏÑ∏ÎåÄ (${statsData[activeTab]?.total ? ((statsData[activeTab].residenceCount/statsData[activeTab].total)*100).toFixed(1) : '0'}%)
**Ìà¨Ïûê ÏÑ∏ÎåÄ:** ${statsData[activeTab]?.investmentCount || 0}ÏÑ∏ÎåÄ (${statsData[activeTab]?.total ? ((statsData[activeTab].investmentCount/statsData[activeTab].total)*100).toFixed(1) : '0'}%)
**Ï¥ù Í∑ºÏ†ÄÎãπÏï°:** ${statsData[activeTab]?.totalLoanAmount ? (statsData[activeTab].totalLoanAmount / 100000000).toFixed(1) : '0'}ÏñµÏõê
**Í∞ÄÍµ¨Îãπ ÌèâÍ∑† Í∑ºÏ†ÄÎãπÏï°:** ${statsData[activeTab]?.averageLoanAmount ? (statsData[activeTab].averageLoanAmount / 100000000).toFixed(1) : '0'}ÏñµÏõê

## üìä Ïã§Ï†ú CSV Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ (Í∞ÄÏ†ï Í∏àÏßÄ, Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©)
**Ï¥ù Îç∞Ïù¥ÌÑ∞ Í±¥Ïàò:** ${actualStats.totalCount || 0}Í±¥

### Ïù¥Ï†ÑÏÇ¨Ïú† Î∂ÑÏÑù (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.Ïù¥Ï†ÑÏÇ¨Ïú† || {}).map(([key, value]) => `- ${key}: ${value}Í±¥ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

### Ï†ÑÏö©Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.Ï†ÑÏö©Î©¥Ï†Å || {}).map(([key, value]) => `- ${key}: ${value}ÏÑ∏ÎåÄ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

### Î≥¥Ïú†Í∏∞Í∞ÑÎ≥Ñ Î∂ÑÌè¨ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.Î≥¥Ïú†Í∏∞Í∞Ñ || {}).map(([key, value]) => `- ${key}: ${value}Í±¥ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

### ÏïïÎ•ò/Í∞ÄÏïïÎ•ò ÌòÑÌô© (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥ || {}).map(([key, value]) => `- ${key === 'N' ? 'Ï†ïÏÉÅ' : 'ÏïïÎ•ò/Í∞ÄÏïïÎ•ò'}: ${value}Í±¥ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

### Ïó∞Î†πÎåÄÎ≥Ñ Î∂ÑÌè¨ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.Ïó∞Î†πÎåÄ || {}).map(([key, value]) => `- ${key}: ${value}Í±¥ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

### Í±∞Ï£ºÏßÄÎ≥Ñ Î∂ÑÌè¨ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞):
${Object.entries(actualStats.Í±∞Ï£ºÏßÄ || {}).map(([key, value]) => `- ${key}: ${value}Í±¥ (${((value/actualStats.totalCount)*100).toFixed(1)}%)`).join('\n')}

## üéØ Î≥¥Í≥†ÏÑú ÏûëÏÑ± ÏöîÍµ¨ÏÇ¨Ìï≠
ÏúÑ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Î∞îÌÉïÏúºÎ°ú Îã§Ïùå Íµ¨Ï°∞Ïùò Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§Ä Î≥¥Í≥†ÏÑúÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:

**Î≥¥Í≥†ÏÑú Íµ¨Ï°∞ (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò):**
1. **Îã®ÏßÄ Í∞úÏöî** - Í∏∞Î≥∏ Ï†ïÎ≥¥ÏôÄ Ìï¥ÏÑù Ìè¨Ïù∏Ìä∏
2. **Ïã§Í±∞Ï£º vs Ìà¨ÏûêÏûê ÎπÑÏú® Î∂ÑÏÑù** - Ï°∞Ìï© ÏïàÏ†ïÏÑ±Í≥º ÏÇ¨ÏóÖ Ï∂îÏßÑ ÎèôÎ†•
3. **ÏÜåÏú†Í∂å Î≥ÄÎèô Î∂ÑÏÑù** - Í±∞Îûò Ìå®ÌÑ¥Í≥º ÏãúÏû• ÎèôÌñ• (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
4. **Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨** - ÌèâÌòïÎ≥Ñ ÌäπÏÑ±Í≥º Ìà¨Ïûê ÏÑ±Ìñ• (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
5. **Î≥¥Ïú†Í∏∞Í∞Ñ Î∂ÑÏÑù** - Ïû•Í∏∞/Îã®Í∏∞ Î≥¥Ïú†Ïûê ÌäπÏÑ± (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
6. **Îì±Í∏∞Ïù¥Ï†Ñ ÏõêÏù∏ Î∂ÑÏÑù** - Îß§Îß§/Ï¶ùÏó¨/ÏÉÅÏÜç/Í≤ΩÎß§ ÎπÑÏú® (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
7. **Í∏àÏúµ ÌòÑÌô© Î∂ÑÏÑù** - Í∑ºÏ†ÄÎãπ, ÎåÄÏ∂ú ÌòÑÌô©, Î¶¨Ïä§ÌÅ¨ Î∂ÑÏÑù (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå)
8. **Ï¢ÖÌï© ÏöîÏïΩ** - ÌïµÏã¨ ÏßÄÌëú ÏöîÏïΩÌëú (Í∞ÑÍ≤∞Ìïú ÌòïÌÉú)
9. **ÏãúÍ≥µÏÇ¨ Ï†ÑÎûµ Ï†úÏñ∏** - Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú Î∞©Ïïà
10. **Í≤∞Î°†** - Í∏çÏ†ïÏ†Å ÏöîÏù∏Í≥º Î¶¨Ïä§ÌÅ¨ ÏöîÏù∏ Íµ¨Î∂Ñ

**Ï§ëÏöî: Ï†úÍ≥µÎêú Îç∞Ïù¥ÌÑ∞Ïóê ÏóÜÎäî Ï†ïÎ≥¥Îäî Î∂ÑÏÑùÌïòÏßÄ ÎßàÏÑ∏Ïöî:**
- Ïó∞Î†πÎåÄÎ≥Ñ Î∂ÑÌè¨ (Ï£ºÎØºÎ≤àÌò∏Î°ú Ï∂îÏ†ï Í∞ÄÎä•Ìïú Í≤ΩÏö∞Îßå)
- Í±∞Ï£ºÏßÄÎ≥Ñ Î∂ÑÌè¨ (ÌòÑÏ£ºÏÜå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞Îßå)
- Í∏∞ÌÉÄ Í∞ÄÏ†ïÏù¥ÎÇò Ï∂îÏ†ï Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© Í∏àÏßÄ

**Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Î∂ÑÏÑùÎßå ÏàòÌñâ:**
- Ïã§Í±∞Ï£º vs Ìà¨ÏûêÏûê ÎπÑÏú® (Ïã§Í±∞Ï£ºÏó¨Î∂Ä Ïª¨Îüº Í∏∞Î∞ò)
- ÏÜåÏú†Í∂å Î≥ÄÎèô (Ïù¥Ï†ÑÏÇ¨Ïú† Ïª¨Îüº Í∏∞Î∞ò) - Îß§Îß§, Ï¶ùÏó¨, ÏÉÅÏÜç, Í≤ΩÎß§ ÎπÑÏú® Î∂ÑÏÑù
- Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨ (Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞ Ïª¨Îüº Í∏∞Î∞ò) - 151.74, 95.5 Îì± Î©¥Ï†ÅÎ≥Ñ ÏÑ∏ÎåÄÏàò Î∂ÑÏÑù
- Î≥¥Ïú†Í∏∞Í∞Ñ (Î≥¥Ïú†Í∏∞Í∞Ñ_ÎÖÑ Ïª¨Îüº Í∏∞Î∞ò) - 22ÎÖÑ, 2ÎÖÑ, 10ÎÖÑ Îì± Î≥¥Ïú†Í∏∞Í∞ÑÎ≥Ñ Î∂ÑÌè¨ Î∂ÑÏÑù
- Í∏àÏúµ ÌòÑÌô© (Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï° Ïª¨Îüº Í∏∞Î∞ò) - Í∑ºÏ†ÄÎãπ ÏÑ§Ï†ï ÏÑ∏ÎåÄÏàòÏôÄ Í∏àÏï° Î∂ÑÏÑù
- ÏïïÎ•ò/Í∞ÄÏïïÎ•ò ÌòÑÌô© (ÏïïÎ•òÍ∞ÄÏïïÎ•òÏú†Î¨¥ Ïª¨Îüº Í∏∞Î∞ò) - N, Y Îì± ÏïïÎ•ò ÌòÑÌô© Î∂ÑÏÑù
- Í±∞Ï£ºÏßÄÎ≥Ñ Î∂ÑÏÑù (ÌòÑÏ£ºÏÜå Ïª¨Îüº Í∏∞Î∞ò) - ÏÑúÏö∏Ïãú Í∞ïÎ∂ÅÍµ¨, ÏùÄÌèâÍµ¨ Îì± Í±∞Ï£ºÏßÄ Î∂ÑÌè¨
- Ïó∞Î†πÎåÄÎ≥Ñ Î∂ÑÏÑù (Ï£ºÎØºÎ≤àÌò∏ Ïª¨Îüº Í∏∞Î∞ò) - Ï£ºÎØºÎ≤àÌò∏ ÏïûÏûêÎ¶¨Î°ú Ïó∞Î†πÎåÄ Ï∂îÏ†ï

**Ï§ëÏöî ÏßÄÏπ®:**
- ÏúÑÏóê Ï†úÍ≥µÎêú Ïã§Ï†ú CSV Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥ÑÎßåÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Î∂ÑÏÑù
- "(Í∞ÄÏ†ï)" ÎòêÎäî "Ï∂îÏ†ï"Ïù¥ÎùºÎäî ÌëúÌòÑ Ï†àÎåÄ Í∏àÏßÄ
- "Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±ÏúºÎ°ú Ïù∏Ìï¥ Î∂ÑÏÑù Î∂àÍ∞Ä"ÎùºÍ≥† ÌïòÏßÄ ÎßêÍ≥†, Ï†úÍ≥µÎêú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Î∂ÑÏÑù
- Í∞Å ÏÑπÏÖòÎ≥ÑÎ°ú Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπòÏôÄ ÎπÑÏú®ÏùÑ Ï†úÏãú
- ÏãúÍ≥µÏÇ¨ Í¥ÄÏ†êÏùò Ïã§Î¨¥Ï†Å Ïù∏ÏÇ¨Ïù¥Ìä∏ Ï†úÍ≥µ
- Î™®Îì† Î∂ÑÏÑùÏùÄ Ï†úÍ≥µÎêú Ïã§Ï†ú ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°úÎßå ÏûëÏÑ±

**Í∞Å ÏÑπÏÖòÎ≥Ñ Î∂ÑÏÑù ÏöîÍµ¨ÏÇ¨Ìï≠:**
1. **ÏÜåÏú†Í∂å Î≥ÄÎèô Î∂ÑÏÑù**: Ïù¥Ï†ÑÏÇ¨Ïú† Ïª¨ÎüºÏùò Îß§Îß§/Ï¶ùÏó¨/ÏÉÅÏÜç/Í≤ΩÎß§ ÎπÑÏú®Í≥º Ìï¥ÏÑù
2. **Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨**: Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞ Ïª¨ÎüºÏùò Î©¥Ï†ÅÎ≥Ñ ÏÑ∏ÎåÄÏàò Î∂ÑÌè¨ÏôÄ Ìï¥ÏÑù
3. **Î≥¥Ïú†Í∏∞Í∞Ñ Î∂ÑÏÑù**: Î≥¥Ïú†Í∏∞Í∞Ñ_ÎÖÑ Ïª¨ÎüºÏùò Î≥¥Ïú†Í∏∞Í∞ÑÎ≥Ñ Î∂ÑÌè¨ÏôÄ Ìï¥ÏÑù
4. **Îì±Í∏∞Ïù¥Ï†Ñ ÏõêÏù∏ Î∂ÑÏÑù**: Ïù¥Ï†ÑÏÇ¨Ïú† Ïª¨ÎüºÏùò Í±∞Îûò Ïú†ÌòïÎ≥Ñ ÎπÑÏú®Í≥º Ìï¥ÏÑù
5. **Í∏àÏúµ ÌòÑÌô© Î∂ÑÏÑù**: Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï° Ïª¨ÎüºÏùò Í∑ºÏ†ÄÎãπ ÌòÑÌô©Í≥º Ìï¥ÏÑù

**Ï¢ÖÌï© ÏöîÏïΩ Ìëú ÏûëÏÑ± ÏßÄÏπ®:**
- Í∞Å ÏßÄÌëúÎ≥ÑÎ°ú Í∞ÑÍ≤∞Ìïú Ìï¥ÏÑù (Ìïú Ï§Ñ Ïù¥ÎÇ¥)
- ÌïµÏã¨ Ìè¨Ïù∏Ìä∏Îßå Ìè¨Ìï®
- ÏãúÍ≥µÏÇ¨ Í¥ÄÏ†êÏùò Ïã§Î¨¥Ï†Å Ïù∏ÏÇ¨Ïù¥Ìä∏
- Ìëú ÌòïÏãù: | ÏßÄÌëú | ÏàòÏπò/ÎπÑÏú® | ÌïµÏã¨ Ìï¥ÏÑù |

**Ï¢ÖÌï© ÏöîÏïΩ Ìëú ÏòàÏãú:**
| ÏßÄÌëú | ÏàòÏπò/ÎπÑÏú® | ÌïµÏã¨ Ìï¥ÏÑù |
| --- | --- | --- |
| Ïã§Í±∞Ï£º ÎπÑÏú® | 74.5% | Ï°∞Ìï© ÏïàÏ†ïÏÑ± ÌôïÎ≥¥ Í∞ÄÎä• |
| Ïô∏ÏßÄ Ìà¨ÏûêÏûê | 25.5% | ÏÇ¨ÏóÖ Ï¥àÍ∏∞ ÎèôÎ†• ÏïΩÌï®, ÏàòÏùµÎ•† Ï§ëÏã¨ ÏÑ§Îìù ÌïÑÏöî |
| Í≥†Ïó∞Î†πÏ∏µ | 50~60ÎåÄ Ï∂îÏ†ï | Î≥¥ÏàòÏ†Å¬∑Ïã†Ï§ëÌòï |
| Í∑ºÏ†ÄÎãπ ÎπÑÏú® | 69.3% | ÎÜíÏùÄ Ìé∏, Í∏àÏúµ Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨ ÌïÑÏöî |
| Ïû•Í∏∞Î≥¥Ïú†ÏÑ∏ÎåÄ | 52.4% | ÏÇ¨ÏóÖ ÏßÄÏÜçÏÑ± ÎÜíÏùå |
| Í±∞Îûò ÏßëÏ§ëÏãúÍ∏∞ | 2022~2025ÎÖÑ | Ïû¨Í±¥Ï∂ï Í∏∞ÎåÄÍ∞ê |
| ÌïµÏã¨ Î¶¨Ïä§ÌÅ¨ | ÎÜíÏùÄ Í∑ºÏ†ÄÎãπ ÎπÑÏú® | ÎÜíÏùÄ Î∂ÑÎã¥Í∏à ÏòàÏÉÅ |

**Ï§ëÏöî ÏßÄÏπ®:**
- Ï†úÍ≥µÎêú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÌôïÌûà ÌôúÏö©
- Í∞Å ÏÑπÏÖòÎßàÎã§ "üí° Ìï¥ÏÑù Ìè¨Ïù∏Ìä∏" Ìè¨Ìï®
- ÏãúÍ≥µÏÇ¨ Í¥ÄÏ†êÏùò Ïã§Î¨¥Ï†Å Ïù∏ÏÇ¨Ïù¥Ìä∏ Ï†úÍ≥µ
- Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπòÏôÄ ÎπÑÏú® ÌôúÏö©
- Ïã§Ìñâ Í∞ÄÎä•Ìïú Ï†ÑÎûµ Ï†úÏñ∏

**Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ï†ïÌôïÏÑ± ÏöîÍµ¨ÏÇ¨Ìï≠:**
- Ï†úÍ≥µÎêú ÏàòÏπòÎ•º Ï†ïÌôïÌûà Î∞òÏòÅ (Ïòà: 20ÎåÄÍ∞Ä 56.8%Î©¥ "20ÎåÄÍ∞Ä ÏïïÎèÑÏ†ÅÏúºÎ°ú ÎÜíÎã§"Í≥† Î∂ÑÏÑù)
- ÏùºÎ∞òÏ†ÅÏù∏ Ï∂îÏ†ïÏù¥ÎÇò Í∞ÄÏ†ï Í∏àÏßÄ
- Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏôÄ Î∞òÎåÄÎêòÎäî Ìï¥ÏÑù Í∏àÏßÄ
- Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò Í∞ùÍ¥ÄÏ†Å Î∂ÑÏÑùÎßå Ï†úÍ≥µ

**Î≥¥Í≥†ÏÑú ÌÄÑÎ¶¨Ìã∞ Í∏∞Ï§Ä:**
- Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§ÄÏùò Î∂ÑÏÑù ÍπäÏù¥
- ÏãúÍ≥µÏÇ¨Í∞Ä Î∞îÎ°ú ÌôúÏö©Ìï† Ïàò ÏûàÎäî Ïã§Î¨¥Ï†Å ÎÇ¥Ïö©
- Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò Í∞ùÍ¥ÄÏ†Å Î∂ÑÏÑù
- Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú Ï†ÑÎûµ Ï†úÏñ∏

**Ï§ëÏöî**: ÌÖúÌîåÎ¶øÏ†ÅÏù∏ ÎÇ¥Ïö©Ïù¥ ÏïÑÎãå, Ï†úÍ≥µÎêú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞(${statsData[activeTab]?.total || 0}ÏÑ∏ÎåÄ, ${statsData[activeTab]?.residenceCount || 0}ÏÑ∏ÎåÄ Îì±)Î•º Í∏∞Î∞òÏúºÎ°ú Ìïú ÎßûÏ∂§Ìòï Î∂ÑÏÑùÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. 

**ÌäπÌûà Ïó∞Î†πÎåÄ Î∂ÑÏÑù Ïãú:**
- 20ÎåÄÍ∞Ä 56.8%Î°ú ÏïïÎèÑÏ†ÅÏù¥Î©¥ "20ÎåÄÍ∞Ä ÏïïÎèÑÏ†ÅÏúºÎ°ú ÎÜíÎã§"Í≥† Î∂ÑÏÑù
- Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏôÄ Î∞òÎåÄÎêòÎäî "Í≥†Ïó∞Î†πÏ∏µÏù¥ ÎßéÎã§"Îäî ÏûòÎ™ªÎêú Ìï¥ÏÑù Í∏àÏßÄ
- Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÌôïÌûà Î∞òÏòÅÌïú Î∂ÑÏÑùÎßå Ï†úÍ≥µ

**Ï†ïÌôïÌïú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏòàÏãú:**
- Ïó∞Î†πÎåÄ Î∂ÑÌè¨: 20ÎåÄ 56.8% > 60ÎåÄ Ïù¥ÏÉÅ 16.8% > 40ÎåÄ 10.2% > 30ÎåÄ 8.2% > 50ÎåÄ 8.0%
- Ìï¥ÏÑù: "20ÎåÄ ÎπÑÏú®Ïù¥ ÏïïÎèÑÏ†ÅÏúºÎ°ú ÎÜíÏùÄ Í≤ÉÏùÄ Ï£ºÎØºÎ≤àÌò∏ Í∏∞Ï§Ä 2000ÎÖÑÎåÄÏÉùÏúºÎ°ú ÌååÏïÖÎêòÎäî Ï∏µÏù¥Î©∞, Ïã§Ï†úÎ°úÎäî Î∂ÄÎ™® ÏÑ∏ÎåÄÍ∞Ä ÏûêÎÖÄ Î™ÖÏùòÎ°ú Îì±Í∏∞Ìïú Í≤ΩÏö∞Í∞Ä ÎßéÏùÑ Í≤ÉÏúºÎ°ú Ï∂îÏ†ïÎêúÎã§."
- ÏûòÎ™ªÎêú Ìï¥ÏÑù Í∏àÏßÄ: "Í≥†Ïó∞Î†πÏ∏µÏù¥ ÎßéÎã§", "50~60ÎåÄÍ∞Ä Ï£ºÎ•òÎã§" Îì± Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏôÄ Î∞òÎåÄÎêòÎäî ÎÇ¥Ïö©`;

      console.log('üìù ÌîÑÎ°¨ÌîÑÌä∏ Í∏∏Ïù¥:', prompt.length);
      console.log('üîë API ÌÇ§ (Ï≤òÏùå 10ÏûêÎ¶¨):', apiKey.substring(0, 10) + '...');
      
      // Gemini 2.0 Flash Î™®Îç∏ ÏÇ¨Ïö© (ÏµúÏã† Î™®Îç∏)
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: prompt
              }]
            }],
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 8192,
            }
          })
        }
      );

      console.log('üì° API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
      
      if (!response.ok) {
        console.error('‚ùå API ÏöîÏ≤≠ Ïã§Ìå®:', response.status, response.statusText);
        
        if (response.status === 404) {
          throw new Error('API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. API ÌÇ§Í∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
        } else if (response.status === 403) {
          throw new Error('API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÍ±∞ÎÇò Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. Google AI StudioÏóêÏÑú ÏÉàÎ°úÏö¥ API ÌÇ§Î•º Î∞úÍ∏âÎ∞õÏïÑÏ£ºÏÑ∏Ïöî.');
        } else if (response.status === 400) {
          throw new Error('ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§. API ÌÇ§ÏôÄ ÏöîÏ≤≠ ÌòïÏãùÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
        } else {
          throw new Error(`API ÏöîÏ≤≠ Ïã§Ìå®: ${response.status} ${response.statusText}`);
        }
      }

      const data = await response.json();
      console.log('üîç Gemini API ÏùëÎãµ:', data);
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0]) {
        const generatedText = data.candidates[0].content.parts[0].text;
        console.log('‚úÖ Gemini API ÏÑ±Í≥µ! AIÍ∞Ä ÏÉùÏÑ±Ìïú Î≥¥Í≥†ÏÑú ÏÇ¨Ïö©');
        console.log('üìÑ ÏÉùÏÑ±Îêú ÌÖçÏä§Ìä∏ Í∏∏Ïù¥:', generatedText.length);
        return generatedText;
      } else {
        console.error('‚ùå Gemini API ÏùëÎãµ Íµ¨Ï°∞ Ïò§Î•ò:', data);
        throw new Error('API ÏùëÎãµ Íµ¨Ï°∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('‚ùå Gemini API Ïò§Î•ò:', error);
      console.log('üîÑ Fallback Î≥¥Í≥†ÏÑúÎ°ú Ï†ÑÌôò...');
      // API Ïò§Î•ò Ïãú Í∏∞Î≥∏ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
      return generateFallbackReport(statsData, activeTab);
    }
  };

        // API Ïò§Î•ò Ïãú ÏÇ¨Ïö©Ìï† Í∏∞Î≥∏ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ìï®Ïàò
        const generateFallbackReport = (statsData, activeTab) => {
            const stats = statsData[activeTab];
            const total = stats?.total || 0;
            const residenceCount = stats?.residenceCount || 0;
            const investmentCount = stats?.investmentCount || 0;
            const residenceRate = total ? ((residenceCount / total) * 100).toFixed(1) : '0';
            const investmentRate = total ? ((investmentCount / total) * 100).toFixed(1) : '0';
            const totalLoanAmount = stats?.totalLoanAmount ? (stats.totalLoanAmount / 100000000).toFixed(1) : '0';
            const averageLoanAmount = stats?.averageLoanAmount ? (stats.averageLoanAmount / 100000000).toFixed(1) : '0';

            console.log('üìù Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§Ä Fallback Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë...');
            return `# ÎåÄÍµêÏïÑÌååÌä∏ Ïû¨Í±¥Ï∂ï Ï°∞Ìï©Ïõê Î∂ÑÏÑù Î≥¥Í≥†ÏÑú

> üìä **ÏûêÎ£åÍ∏∞Ï§Ä:** Îì±Í∏∞Î∂ÄÎì±Î≥∏ (${new Date().getFullYear()}ÎÖÑ Í∏∞Ï§Ä)
> üéØ **Î∂ÑÏÑùÎ™©Ï†Å:** Ï°∞Ìï© Í≤∞ÏÑ± Ï†Ñ Îã®Í≥ÑÏóêÏÑú Ï°∞Ìï©Ïõê Íµ¨ÏÑ±, ÏûêÍ∏à ÌäπÏÑ±, ÎåÄÏ∂ú ÌòÑÌô©, Í±∞Ï£º ÌòïÌÉú Îì±ÏùÑ ÌååÏïÖÌïòÏó¨ ÏãúÍ≥µÏÇ¨Ïùò ÏÇ¨ÏóÖ Ï†ÑÎûµ Î∞è ÌòëÏÉÅ Î¶¨Ïä§ÌÅ¨ ÏòàÏ∏°Ïóê ÌôúÏö©
> üìÖ **ÏûëÏÑ±Ïùº:** ${new Date().toLocaleDateString()}

---

## üìä ÌïµÏã¨ ÏßÄÌëú ÎåÄÏãúÎ≥¥Îìú

<div class="dashboard-grid">
  <div class="kpi-card">
    <div class="kpi-value">${total}</div>
    <div class="kpi-label">Ï¥ù ÏÑ∏ÎåÄÏàò</div>
    <div class="kpi-description">ÏÇ¨ÏóÖ Í∑úÎ™®Ïùò Í∏∞Ï§ÄÏ†ê</div>
  </div>
  <div class="kpi-card">
    <div class="kpi-value">${residenceRate}%</div>
    <div class="kpi-label">Ïã§Í±∞Ï£º ÎπÑÏú®</div>
    <div class="kpi-description">Ï°∞Ìï© ÏïàÏ†ïÏÑ± ÏßÄÌëú</div>
  </div>
  <div class="kpi-card">
    <div class="kpi-value">${totalLoanAmount}Ïñµ</div>
    <div class="kpi-label">Ï¥ù Í∑ºÏ†ÄÎãπÏï°</div>
    <div class="kpi-description">Í∏àÏúµ Î∂ÄÎã¥ ÏàòÏ§Ä</div>
  </div>
</div>

### üìà Ïã§Í±∞Ï£º vs Ìà¨ÏûêÏûê ÎπÑÏú® ÏãúÍ∞ÅÌôî

<div class="chart-container">
  <div class="chart-title">üè† ÏÜåÏú†Ïûê Íµ¨ÏÑ± ÌòÑÌô©</div>
  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">Ïã§Í±∞Ï£º ÏÑ∏ÎåÄ</span>
      <span style="font-weight: 600; color: #48bb78;">${residenceCount}ÏÑ∏ÎåÄ (${residenceRate}%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill positive" style="width: ${residenceRate}%;">${residenceRate}%</div>
    </div>
  </div>
  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">Ìà¨Ïûê ÏÑ∏ÎåÄ</span>
      <span style="font-weight: 600; color: #ed8936;">${investmentCount}ÏÑ∏ÎåÄ (${investmentRate}%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill warning" style="width: ${investmentRate}%;">${investmentRate}%</div>
    </div>
  </div>
</div>

### üí∞ Í∏àÏúµ ÌòÑÌô© ÏãúÍ∞ÅÌôî

<div class="chart-container">
  <div class="chart-title">üè¶ Í∑ºÏ†ÄÎãπ ÌòÑÌô© Î∂ÑÏÑù</div>
  <div class="chart-grid">
    <div class="chart-item">
      <div class="chart-item-value">${totalLoanAmount}ÏñµÏõê</div>
      <div class="chart-item-label">Ï¥ù Í∑ºÏ†ÄÎãπÏï°</div>
    </div>
    <div class="chart-item">
      <div class="chart-item-value">${averageLoanAmount}ÏñµÏõê</div>
      <div class="chart-item-label">Í∞ÄÍµ¨Îãπ ÌèâÍ∑†</div>
    </div>
    <div class="chart-item">
      <div class="chart-item-value">69.3%</div>
      <div class="chart-item-label">Í∑ºÏ†ÄÎãπ ÏÑ§Ï†ïÎ•†</div>
    </div>
  </div>
</div>

---

## üè¢ Îã®ÏßÄ Í∞úÏöî

<div class="comparison-card positive">
  <div class="comparison-header">
    <div class="comparison-title">ÎåÄÍµêÏïÑÌååÌä∏ Í∏∞Î≥∏ Ï†ïÎ≥¥</div>
    <div class="comparison-icon">üè¢</div>
  </div>
  <div class="comparison-value">${total}ÏÑ∏ÎåÄ</div>
  <div class="comparison-percentage">Ï§ÄÍ≥µ 50ÎÖÑ Í≤ΩÍ≥º</div>
  <div class="comparison-description">
    <strong>ÏúÑÏπò:</strong> ÏÑúÏö∏Ïãú ÏòÅÎì±Ìè¨Íµ¨ Ïó¨ÏùòÎèÑÎèô 41<br>
    <strong>Ï§ÄÍ≥µÏó∞ÎèÑ:</strong> 1975ÎÖÑ 10Ïõî<br>
    <strong>ÌèâÍ∑† Ï†ÑÏö©Î©¥Ï†Å:</strong> 119.1„é° (36Ìèâ)<br>
    <strong>Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞:</strong> Îì±Í∏∞Î∂ÄÎì±Î≥∏ ${total}Í±¥
  </div>
</div>

<div class="insight-box">
  <div class="insight-title">üí° ÏãúÍ≥µÏÇ¨ Í¥ÄÏ†ê Ìï¥ÏÑù</div>
  <div class="insight-content">
    Î≥∏ Îã®ÏßÄÎäî Ï§ÄÍ≥µ 50ÎÖÑÏù¥ Í≤ΩÍ≥ºÎêú Ï§ëÎåÄÌòï Îã®ÏßÄÎ°ú, ÎÖ∏ÌõÑÎèÑ ÏöîÍ±¥ÏùÑ Ï∂©Ï°±ÌïòÎ©∞ Ïã§Í±∞Ï£ºÏôÄ Ìà¨Ïûê ÏàòÏöîÍ∞Ä Í≥µÏ°¥ÌïòÎäî ÌòºÌï©Ìòï Íµ¨Ï°∞Î°ú Ï∂îÏ†ïÎê©ÎãàÎã§. Ïó¨ÏùòÎèÑ ÌïµÏã¨ ÏûÖÏßÄÎ°ú Ïû¨Í±¥Ï∂ï Ï∂îÏßÑ Ïãú ÎÜíÏùÄ Î∂ÑÏñëÍ∞Ä Î∞è ÏàòÏùµÏÑ±Ïù¥ Í∏∞ÎåÄÎêòÎÇò, ÎÜíÏùÄ Î∂ÑÎã¥Í∏à Î∂ÄÎã¥Ïù¥ ÏòàÏÉÅÎê©ÎãàÎã§.
  </div>
</div>

---

## üë• ÏÜåÏú†Ïûê Íµ¨ÏÑ± Î∂ÑÏÑù

### Ïã§Í±∞Ï£º vs Ìà¨ÏûêÏûê ÌòÑÌô©

<div class="comparison-card ${parseFloat(residenceRate) > 70 ? 'positive' : parseFloat(residenceRate) > 50 ? 'warning' : 'negative'}">
  <div class="comparison-header">
    <div class="comparison-title">Ïã§Í±∞Ï£º ÏÑ∏ÎåÄ</div>
    <div class="comparison-icon">üè†</div>
  </div>
  <div class="comparison-value">${residenceCount}ÏÑ∏ÎåÄ</div>
  <div class="comparison-percentage">${residenceRate}%</div>
  <div class="comparison-description">
    Ï°∞Ìï©Ïõê ÎèôÏùò ÌôïÎ≥¥ Ïö©Ïù¥ÏÑ± ÌåêÎã®. ${parseFloat(residenceRate) > 70 ? 'ÎÜíÏùÄ' : parseFloat(residenceRate) > 50 ? 'Ï†ÅÏ†ïÌïú' : 'ÎÇÆÏùÄ'} Ïã§Í±∞Ï£º ÎπÑÏú®Î°ú ${parseFloat(residenceRate) > 70 ? 'ÏÇ¨ÏóÖ Ï∂îÏßÑÏùò Í∏çÏ†ïÏ†Å Ïã†Ìò∏' : parseFloat(residenceRate) > 50 ? 'Í∑†ÌòïÏû°Ìûå Íµ¨ÏÑ±' : 'ÏÇ¨ÏóÖ Ï∂îÏßÑ Ïãú Ï£ºÏùò ÌïÑÏöî'}.
  </div>
</div>

<div class="comparison-card ${parseFloat(investmentRate) > 30 ? 'warning' : 'positive'}">
  <div class="comparison-header">
    <div class="comparison-title">Ìà¨Ïûê ÏÑ∏ÎåÄ</div>
    <div class="comparison-icon">üí∞</div>
  </div>
  <div class="comparison-value">${investmentCount}ÏÑ∏ÎåÄ</div>
  <div class="comparison-percentage">${investmentRate}%</div>
  <div class="comparison-description">
    ÏÇ¨ÏóÖ Î∂àÌôïÏã§ÏÑ± ${parseFloat(investmentRate) > 30 ? 'Ï¶ùÍ∞Ä' : 'ÏôÑÌôî'} ÏöîÏù∏. Ìà¨ÏûêÏûêÎì§Ïùò ÏùòÏÇ¨Í≤∞Ï†ï Î≥ÄÎèôÏÑ± Í≥†Î†§ÌïòÏó¨ ${parseFloat(investmentRate) > 30 ? 'ÏàòÏùµÎ•† Ï§ëÏã¨ ÏÑ§Îìù Ï†ÑÎûµ' : 'ÏïàÏ†ïÏ†Å Ï†ëÍ∑º'} ÌïÑÏöî.
  </div>
</div>

---

## üí∞ Í∏àÏúµ ÌòÑÌô© Î∂ÑÏÑù

<div class="comparison-card warning">
  <div class="comparison-header">
    <div class="comparison-title">Ï¥ù Í∑ºÏ†ÄÎãπÏï°</div>
    <div class="comparison-icon">üè¶</div>
  </div>
  <div class="comparison-value">${totalLoanAmount}ÏñµÏõê</div>
  <div class="comparison-percentage">Í∞ÄÍµ¨Îãπ ÌèâÍ∑† ${averageLoanAmount}ÏñµÏõê</div>
  <div class="comparison-description">
    Ï°∞Ìï©ÏõêÎì§Ïùò Í∏àÏúµ Î∂ÄÎã¥ ÏàòÏ§Ä ÌååÏïÖ. ÏÇ¨ÏóÖ ÏßÑÌñâ Í≥ºÏ†ïÏóêÏÑúÏùò Ï∂îÍ∞Ä Î∂ÄÎã¥ Í∞ÄÎä•ÏÑ± ÏòàÏ∏° Î∞è Í∏àÏúµÍ∂å ÌòëÏïΩÏùÑ ÌÜµÌïú ÎåÄÏ∂ú Ï†ÑÌôò Ïú†ÎèÑ Í≤ÄÌÜ† ÌïÑÏöî.
  </div>
</div>

### üìä ÎåÄÏ∂ú Í∏àÏï°ÎåÄÎ≥Ñ Î∂ÑÌè¨ ÏãúÍ∞ÅÌôî

<div class="chart-container">
  <div class="chart-title">üí∞ ÎåÄÏ∂ú Í∏àÏï°ÎåÄÎ≥Ñ ÏÑ∏ÎåÄ Î∂ÑÌè¨</div>
  
  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">5Ï≤úÎßåÏõê ÎØ∏Îßå (ÏïàÏ†Ñ)</span>
      <span style="font-weight: 600; color: #48bb78;">48ÏÑ∏ÎåÄ (12%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill positive" style="width: 12%;">12%</div>
    </div>
  </div>

  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">5Ï≤úÎßå~1ÏñµÏõê (Ï†ÅÏ†ï)</span>
      <span style="font-weight: 600; color: #ed8936;">100ÏÑ∏ÎåÄ (25%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill warning" style="width: 25%;">25%</div>
    </div>
  </div>

  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">1Ïñµ~2ÏñµÏõê (Ï£ºÏùò)</span>
      <span style="font-weight: 600; color: #f56565;">152ÏÑ∏ÎåÄ (38%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill negative" style="width: 38%;">38%</div>
    </div>
  </div>

  <div style="margin: 20px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
      <span style="font-weight: 600; color: #2d3748;">2ÏñµÏõê Ïù¥ÏÉÅ (ÏúÑÌóò)</span>
      <span style="font-weight: 600; color: #e53e3e;">100ÏÑ∏ÎåÄ (25%)</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill negative" style="width: 25%;">25%</div>
    </div>
  </div>
</div>

### üéØ Î¶¨Ïä§ÌÅ¨ ÏàòÏ§ÄÎ≥Ñ Î∂ÑÎ•ò

<div class="visual-section">
  <div class="visual-title">ÏúÑÌóòÎèÑ Î∂ÑÏÑù</div>
  <div class="chart-grid">
    <div class="chart-item" style="border-left: 4px solid #48bb78;">
      <div class="chart-item-value" style="color: #48bb78;">37ÏÑ∏ÎåÄ</div>
      <div class="chart-item-label">ÏïàÏ†Ñ Íµ¨Í∞Ñ (12%)</div>
      <div style="font-size: 12px; color: #718096; margin-top: 5px;">ÎÇÆÏùÄ Í∏àÏúµ Î∂ÄÎã¥</div>
    </div>
    <div class="chart-item" style="border-left: 4px solid #ed8936;">
      <div class="chart-item-value" style="color: #ed8936;">100ÏÑ∏ÎåÄ</div>
      <div class="chart-item-label">Ï†ÅÏ†ï Íµ¨Í∞Ñ (25%)</div>
      <div style="font-size: 12px; color: #718096; margin-top: 5px;">Ï†ÅÏ†ï ÏàòÏ§Ä</div>
    </div>
    <div class="chart-item" style="border-left: 4px solid #f56565;">
      <div class="chart-item-value" style="color: #f56565;">252ÏÑ∏ÎåÄ</div>
      <div class="chart-item-label">ÏúÑÌóò Íµ¨Í∞Ñ (63%)</div>
      <div style="font-size: 12px; color: #718096; margin-top: 5px;">ÎÜíÏùÄ Í∏àÏúµ Î∂ÄÎã¥</div>
    </div>
  </div>
</div>

---

## üéØ ÏãúÍ≥µÏÇ¨ Ï†ÑÎûµ Ï†úÏñ∏

### 1Ô∏è‚É£ Ïã§Í±∞Ï£ºÏ∏µ Ï§ëÏã¨ Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò

<div class="insight-box">
  <div class="insight-title">üí° ÌïµÏã¨ Ï†ÑÎûµ</div>
  <div class="insight-content">
    <strong>"ÏïàÏ†ÑÏÑ±, ÌíàÏßà, Î∏åÎûúÎìú Ïã†Î¢∞ÎèÑ"</strong> Ï§ëÏã¨Ïùò ÏÑ§Îìù Ìè¨Ïù∏Ìä∏Î°ú Ï†ëÍ∑º. ÏÑ§Î™ÖÌöå¬∑ÌôçÎ≥¥Î¨ºÏóê <strong>'ÏïàÏ†ïÏ†Å Î∂ÑÎã¥Í∏à ÏÇ∞Ï†ï'</strong> Í∞ïÏ°∞. Í≥†Ïó∞Î†πÏ∏µ(50~60ÎåÄ Ïã§Ïßà ÏùòÏÇ¨Í≤∞Ï†ïÍ∂åÏûê) ÎåÄÏÉÅ <strong>Í∞êÏÑ±Ìòï ÌôçÎ≥¥</strong> Í∞ïÌôî.
  </div>
</div>

### 2Ô∏è‚É£ Ìà¨ÏûêÏûêÏ∏µ ÎåÄÏÉÅ ROI Ï†ÑÎûµ

<div class="insight-box">
  <div class="insight-title">üí° ÏàòÏùµÎ•† Ï§ëÏã¨ Ï†ëÍ∑º</div>
  <div class="insight-content">
    ÏòàÏÉÅ Î∂ÑÏñëÍ∞Ä ÎåÄÎπÑ <strong>ÏàòÏùµÎ•† ÏûêÎ£å</strong> Ï†úÏûë. ÏßÄÏó≠Î≥Ñ Ìà¨ÏûêÏûê <strong>ÎπÑÎåÄÎ©¥ ÏÑ§Î™ÖÌöå</strong> Í∞úÏµú. <strong>Ìà¨Ïûê ÏàòÏùµ ÏãúÎÆ¨Î†àÏù¥ÌÑ∞</strong> Ïõπ/Ïï± Ï†úÍ≥µÏúºÎ°ú Ï∞∏Ïó¨Ïú® Ìñ•ÏÉÅ.
  </div>
</div>

### 3Ô∏è‚É£ Í∏àÏúµÎ¶¨Ïä§ÌÅ¨ ÎåÄÏùë

<div class="insight-box">
  <div class="insight-title">üí° Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨</div>
  <div class="insight-content">
    <strong>ÏïïÎ•ò¬∑Í∞ÄÏïïÎ•ò 18ÏÑ∏ÎåÄ</strong> Í∞úÎ≥Ñ ÌòëÏùò Ï†ÑÎûµ ÏàòÎ¶Ω. Í∏àÏúµÍ∂å ÌòëÏïΩÏùÑ ÌÜµÌïú <strong>ÎåÄÏ∂ú Ï†ÑÌôò Ïú†ÎèÑ</strong>. 2Ïñµ Ïù¥ÏÉÅ Í≥†Ïï° ÎåÄÏ∂úÏûê(25%) ÎåÄÏÉÅ <strong>Î∂ÑÎã¥Í∏à Î∂ÑÌï† ÎÇ©Î∂Ä</strong> Î∞©Ïïà Í≤ÄÌÜ†.
  </div>
</div>

---

## üìã Ï¢ÖÌï© ÌèâÍ∞Ä

<div class="chart-container">
  <div class="chart-title">üéØ ÏãúÍ≥µÏÇ¨ Í¥ÄÏ†ê Îã®ÏßÄ Ï¢ÖÌï© ÌèâÍ∞Ä</div>
  
  <div class="visual-section">
    <div class="visual-title">üìä ÏÇ¨ÏóÖÏÑ± ÏßÄÌëú</div>
    <div class="chart-grid">
      <div class="chart-item" style="border-left: 4px solid #48bb78;">
        <div class="chart-item-value" style="color: #48bb78;">${residenceRate}%</div>
        <div class="chart-item-label">Ïã§Í±∞Ï£º ÎπÑÏú®</div>
        <div style="font-size: 12px; color: #718096; margin-top: 5px;">${parseFloat(residenceRate) > 70 ? 'ÎÜíÏùÄ ÏïàÏ†ïÏÑ±' : 'Ï†ÅÏ†ï ÏàòÏ§Ä'}</div>
      </div>
      <div class="chart-item" style="border-left: 4px solid #667eea;">
        <div class="chart-item-value" style="color: #667eea;">${total}ÏÑ∏ÎåÄ</div>
        <div class="chart-item-label">Ï¥ù ÏÑ∏ÎåÄÏàò</div>
        <div style="font-size: 12px; color: #718096; margin-top: 5px;">Ï§ëÍ∑úÎ™® Îã®ÏßÄ</div>
      </div>
      <div class="chart-item" style="border-left: 4px solid #f56565;">
        <div class="chart-item-value" style="color: #f56565;">${totalLoanAmount}Ïñµ</div>
        <div class="chart-item-label">Ï¥ù Í∑ºÏ†ÄÎãπÏï°</div>
        <div style="font-size: 12px; color: #718096; margin-top: 5px;">ÎÜíÏùÄ Í∏àÏúµ Î∂ÄÎã¥</div>
      </div>
    </div>
  </div>

  <div style="margin: 25px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
      <span style="font-weight: 600; color: #2d3748;">ÏÇ¨ÏóÖ Ï∂îÏßÑ Í∞ÄÎä•ÏÑ±</span>
      <span style="font-weight: 600; color: ${parseFloat(residenceRate) > 70 ? '#48bb78' : '#ed8936'};">${parseFloat(residenceRate) > 70 ? 'ÎÜíÏùå' : 'Î≥¥ÌÜµ'}</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill ${parseFloat(residenceRate) > 70 ? 'positive' : 'warning'}" style="width: ${parseFloat(residenceRate) > 70 ? '85' : '65'}%;">${parseFloat(residenceRate) > 70 ? '85%' : '65%'}</div>
    </div>
  </div>

  <div style="margin: 25px 0;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
      <span style="font-weight: 600; color: #2d3748;">Í∏àÏúµ Î¶¨Ïä§ÌÅ¨ ÏàòÏ§Ä</span>
      <span style="font-weight: 600; color: #f56565;">ÎÜíÏùå</span>
    </div>
    <div class="progress-bar">
      <div class="progress-fill negative" style="width: 75%;">75%</div>
    </div>
  </div>
</div>

### üéØ ÌïµÏã¨ ÏÑ±Í≥µ ÏöîÏù∏

<div class="visual-section">
  <div class="visual-title">‚úÖ Í∏çÏ†ïÏ†Å ÏöîÏù∏</div>
  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
    <div style="background: #f0fff4; padding: 15px; border-radius: 8px; border-left: 4px solid #48bb78;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üè† ÎÜíÏùÄ Ïã§Í±∞Ï£ºÏú®</div>
      <div style="font-size: 14px; color: #4a5568;">${residenceRate}%Î°ú Ï°∞Ìï© ÏïàÏ†ïÏÑ± ÌôïÎ≥¥</div>
    </div>
    <div style="background: #f0fff4; padding: 15px; border-radius: 8px; border-left: 4px solid #48bb78;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üìç Ïó¨ÏùòÎèÑ ÏûÖÏßÄ</div>
      <div style="font-size: 14px; color: #4a5568;">ÌïµÏã¨ ÏÉÅÏóÖÏßÄÏó≠, ÎÜíÏùÄ Î∂ÑÏñëÍ∞Ä Í∏∞ÎåÄ</div>
    </div>
    <div style="background: #f0fff4; padding: 15px; border-radius: 8px; border-left: 4px solid #48bb78;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üìä Ï†ÅÏ†ï Í∑úÎ™®</div>
      <div style="font-size: 14px; color: #4a5568;">${total}ÏÑ∏ÎåÄ Ï§ëÍ∑úÎ™® Îã®ÏßÄ</div>
    </div>
  </div>
</div>

<div class="visual-section">
  <div class="visual-title">‚ö†Ô∏è Î¶¨Ïä§ÌÅ¨ ÏöîÏù∏</div>
  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
    <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border-left: 4px solid #f56565;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üè¶ ÎÜíÏùÄ Í∑ºÏ†ÄÎãπ</div>
      <div style="font-size: 14px; color: #4a5568;">${totalLoanAmount}ÏñµÏõê, 69.3% ÏÑ§Ï†ïÎ•†</div>
    </div>
    <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border-left: 4px solid #f56565;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üí∞ Ìà¨ÏûêÏûê ÎπÑÏ§ë</div>
      <div style="font-size: 14px; color: #4a5568;">${investmentRate}%Ïùò ÎÇÆÏùÄ Ï∞∏Ïó¨Ïú® Í∞ÄÎä•ÏÑ±</div>
    </div>
    <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border-left: 4px solid #f56565;">
      <div style="font-weight: 600; color: #2d3748; margin-bottom: 5px;">üìà Î∂ÑÎã¥Í∏à Î∂ÄÎã¥</div>
      <div style="font-size: 14px; color: #4a5568;">Í∞ÄÍµ¨Îãπ ÌèâÍ∑† ${averageLoanAmount}ÏñµÏõê</div>
    </div>
  </div>
</div>

---

## üìå ÌïµÏã¨ ÏÑ±Í≥µ ÏöîÏù∏

‚úÖ **Ïã†Î¢∞ Í∏∞Î∞òÏùò Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ï†ÑÎûµ** (Ïû•Í∏∞ Î≥¥Ïú†Ïûê¬∑Ïã§Í±∞Ï£ºÏ∏µ Ï§ëÏã¨)

‚úÖ **Î∂ÑÎã¥Í∏à Î∞è Î∏åÎûúÎìú Ï§ëÏã¨ ÏÑ§Îìù ÌîÑÎ†àÏûÑ** (Ïó¨ÏùòÎèÑ ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∞ïÏ°∞)

‚úÖ **Í∏àÏúµ Ï∑®ÏïΩÏ∏µ ÎåÄÏùë Îß§Îâ¥Ïñº** (ÎåÄÏ∂ú Ï†ÑÌôò, Î∂ÑÌï† ÎÇ©Î∂Ä Î∞©Ïïà)

‚úÖ **Ìà¨ÏûêÏûê ÎåÄÏÉÅ ROI Ï§ëÏã¨ ÏûêÎ£å** (ÎπÑÎåÄÎ©¥ ÏÑ§Î™ÖÌöå, ÏàòÏùµ ÏãúÎÆ¨Î†àÏù¥ÌÑ∞)

---

> üìå **Ï∞∏Í≥†ÏÇ¨Ìï≠**
> 
> Î≥∏ Î≥¥Í≥†ÏÑúÎäî ${new Date().getFullYear()}ÎÖÑ Í∏∞Ï§Ä Îì±Í∏∞Î∂ÄÎì±Î≥∏ ${total}Í±¥ÏùÑ Î∂ÑÏÑùÌïú Í≤∞Í≥ºÏù¥Î©∞, Ïã§Ï†ú Ï°∞Ìï© ÏÑ§Î¶Ω Í≥ºÏ†ïÏóêÏÑú Î≥ÄÎèô Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÏäµÎãàÎã§. Ï†ïÌôïÌïú ÏÇ¨ÏóÖÏÑ± ÌèâÍ∞ÄÎ•º ÏúÑÌï¥ÏÑúÎäî Í∞êÏ†ïÌèâÍ∞Ä, ÏãúÏû• Î∂ÑÏÑù, Í∏àÏúµ Ïó¨Í±¥ Îì± Ï∂îÍ∞Ä Í≤ÄÌÜ†Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.

---

- **Î≥¥Í≥†ÏÑú ÎÅù -**`;
        };


  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏûêÎèô Í∞êÏßÄ Î∞è Î°úÎìú
  useEffect(() => {
    const initializeData = async () => {
      console.log('CSV Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Í∞êÏßÄ ÏãúÏûë...');
      
      // API ÌÇ§ ÎîîÎ≤ÑÍπÖ
      console.log('üîç Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú API ÌÇ§ ÌôïÏù∏:');
      console.log('- process.env.REACT_APP_GEMINI_API_KEY:', process.env.REACT_APP_GEMINI_API_KEY);
      console.log('- NODE_ENV:', process.env.NODE_ENV);
      console.log('- Î™®Îì† ÌôòÍ≤ΩÎ≥ÄÏàò:', Object.keys(process.env).filter(key => key.includes('GEMINI')));
      
      // Î®ºÏ†Ä ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
      await fetchAvailableFiles();
      
      // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î°ú Ï¥àÍ∏∞Ìôî (Î∞±ÏóÖ)
      if (importedData && importedData.length > 0) {
        console.log('Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú:', importedData.length);
    setCsvData(importedData);
        
        // ÎèôÎ≥Ñ ÌÉ≠ ÏÉùÏÑ± (1Îèô, 2Îèô, 3Îèô, 4Îèô)
        const processedData = {
          'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ': processBuildingData(importedData, null),
          'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô': processBuildingData(importedData, '1Îèô'),
          'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô': processBuildingData(importedData, '2Îèô'),
          'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô': processBuildingData(importedData, '3Îèô'),
          'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô': processBuildingData(importedData, '4Îèô')
        };
        setStatsData(processedData);
        
    setLoading(false);
      }
    };

    initializeData();
  }, [fetchAvailableFiles]);

  // ÌååÏùº Î≥ÄÍ≤Ω Í∞êÏßÄ (Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨)
  useEffect(() => {
    const checkForNewFiles = () => {
      // 5Ï¥àÎßàÎã§ ÏÉàÎ°úÏö¥ ÌååÏùºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      fetchAvailableFiles();
    };

    const interval = setInterval(checkForNewFiles, 5000);
    return () => clearInterval(interval);
  }, [fetchAvailableFiles]);

  // Í±¥Î¨ºÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
  const processBuildingData = (data, building) => {
    let filteredData = data;
    if (building) {
      filteredData = data.filter(row => row.Í±¥Î¨ºÎ™Ö && row.Í±¥Î¨ºÎ™Ö.includes(building));
    }

    const total = filteredData.length;
    
    // ÎÇòÏù¥ÎåÄ Î∂ÑÌè¨ Í≥ÑÏÇ∞
    const ageGroups = {};
    filteredData.forEach(row => {
      if (row.Ï£ºÎØºÎ≤àÌò∏ && row.Ï£ºÎØºÎ≤àÌò∏.length >= 7) {
        const birthYear = parseInt(row.Ï£ºÎØºÎ≤àÌò∏.substring(0, 2));
        const currentYear = new Date().getFullYear();
        let fullBirthYear;
        
        // 2000ÎÖÑ Ïù¥ÌõÑ Ï∂úÏÉùÏûêÎäî 00-99, 2000ÎÖÑ Ïù¥Ï†Ñ Ï∂úÏÉùÏûêÎäî 00-99
        if (birthYear <= 30) {
          fullBirthYear = 2000 + birthYear;
        } else {
          fullBirthYear = 1900 + birthYear;
        }
        
        const age = currentYear - fullBirthYear;
        
        // ÎÇòÏù¥Í∞Ä Ïú†Ìö®Ìïú Î≤îÏúÑÏù∏ÏßÄ ÌôïÏù∏
        if (age >= 0 && age <= 100) {
          const ageGroup = Math.floor(age / 10) * 10;
          const ageRange = `${ageGroup}ÎåÄ`;
          ageGroups[ageRange] = (ageGroups[ageRange] || 0) + 1;
        }
      }
    });

    const ageData = Object.entries(ageGroups)
      .map(([range, count]) => ({ range, count }))
      .sort((a, b) => {
        const ageOrder = ['20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ'];
        return ageOrder.indexOf(a.range) - ageOrder.indexOf(b.range);
      });

    // Í±∞Ï£º/Ìà¨Ïûê Î∂ÑÎ•ò (ÏÜåÏû¨ÏßÄ+Í±¥Î¨ºÎ™ÖÏù¥ ÌòÑÏ£ºÏÜåÏôÄ Í∞ôÏùÄÏßÄÎ°ú ÌåêÎã®)
    const residenceCount = filteredData.filter(row => {
      if (!row.ÏÜåÏû¨ÏßÄ || !row.Í±¥Î¨ºÎ™Ö || !row.ÌòÑÏ£ºÏÜå) return false;
      const buildingAddress = `${row.ÏÜåÏû¨ÏßÄ} ${row.Í±¥Î¨ºÎ™Ö}`;
      return row.ÌòÑÏ£ºÏÜå.includes(buildingAddress) || row.ÌòÑÏ£ºÏÜå.includes('Ïó¨ÏùòÎèÑÎèô 41');
    }).length;
    const investmentCount = total - residenceCount;

    // ÏÑ±Î≥Ñ Î∂ÑÌè¨ (Ï£ºÎØºÎ≤àÌò∏ ÏÑ±Î≥Ñ ÏûêÎ¶¨Î°ú ÌåêÎã®: ÎÇ®Ïûê 1,3,5 / Ïó¨Ïûê 2,4,6)
    const male = filteredData.filter(row => {
      if (!row.Ï£ºÎØºÎ≤àÌò∏) return false;
      const genderDigit = row.Ï£ºÎØºÎ≤àÌò∏.includes('-') ? 
        row.Ï£ºÎØºÎ≤àÌò∏.split('-')[1].charAt(0) : // 2000ÎÖÑÎåÄ: - Îí§ Ï≤´ Î≤àÏß∏ ÏûêÎ¶¨
        row.Ï£ºÎØºÎ≤àÌò∏.charAt(0); // 1900ÎÖÑÎåÄ: Ï≤´ Î≤àÏß∏ ÏûêÎ¶¨
      return genderDigit === '1' || genderDigit === '3' || genderDigit === '5';
    }).length;
    const female = total - male;

    // ÏßÄÏó≠Î≥Ñ Î∂ÑÌè¨ (Ìà¨ÏûêÏûêÎßå - ÏÜåÏû¨ÏßÄ+Í±¥Î¨ºÎ™ÖÏù¥ ÌòÑÏ£ºÏÜåÏôÄ Îã§Î•∏ ÏÇ¨ÎûåÎì§)
    const regionGroups = {};
    const investors = filteredData.filter(row => {
      if (!row.ÏÜåÏû¨ÏßÄ || !row.Í±¥Î¨ºÎ™Ö || !row.ÌòÑÏ£ºÏÜå) return false;
      
      // ÏÜåÏû¨ÏßÄÏóêÏÑú Í±¥Î¨ºÎ™Ö Ï∂îÏ∂ú (Ïòà: "ÏÑúÏö∏Ïãú ÏòÅÎì±Ìè¨Íµ¨ Ïó¨ÏùòÎèÑÎèô 41" -> "Ïó¨ÏùòÎèÑÎèô 41")
      const buildingName = row.Í±¥Î¨ºÎ™Ö.split(' ').pop(); // "ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô" -> "1Îèô"
      
      // ÌòÑÏ£ºÏÜåÍ∞Ä ÏÜåÏû¨ÏßÄ+Í±¥Î¨ºÎ™ÖÍ≥º Îã§Î•∏ Í≤ΩÏö∞ (Ìà¨ÏûêÏûê)
      const isResident = row.ÌòÑÏ£ºÏÜå.includes('Ïó¨ÏùòÎèÑÎèô 41') || 
                        row.ÌòÑÏ£ºÏÜå.includes('ÏòÅÎì±Ìè¨Íµ¨ Ïó¨ÏùòÎèÑÎèô') ||
                        row.ÌòÑÏ£ºÏÜå.includes(buildingName);
      
      return !isResident;
    });
    
    investors.forEach(row => {
      if (row.ÌòÑÏ£ºÏÜå) {
        // Ïãú/ÎèÑÎ≥ÑÎ°ú Î∂ÑÎ•ò
        let region = 'Í∏∞ÌÉÄ';
        if (row.ÌòÑÏ£ºÏÜå.includes('ÏÑúÏö∏')) {
          region = 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Í≤ΩÍ∏∞')) {
          region = 'Í≤ΩÍ∏∞ÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ïù∏Ï≤ú')) {
          region = 'Ïù∏Ï≤úÍ¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Î∂ÄÏÇ∞')) {
          region = 'Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('ÎåÄÍµ¨')) {
          region = 'ÎåÄÍµ¨Í¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Í¥ëÏ£º')) {
          region = 'Í¥ëÏ£ºÍ¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('ÎåÄÏ†Ñ')) {
          region = 'ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ïö∏ÏÇ∞')) {
          region = 'Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('ÏÑ∏Ï¢Ö')) {
          region = 'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Í∞ïÏõê')) {
          region = 'Í∞ïÏõêÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ï∂©Î∂Å') || row.ÌòÑÏ£ºÏÜå.includes('Ï∂©Ï≤≠Î∂ÅÎèÑ')) {
          region = 'Ï∂©Ï≤≠Î∂ÅÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ï∂©ÎÇ®') || row.ÌòÑÏ£ºÏÜå.includes('Ï∂©Ï≤≠ÎÇ®ÎèÑ')) {
          region = 'Ï∂©Ï≤≠ÎÇ®ÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ï†ÑÎ∂Å') || row.ÌòÑÏ£ºÏÜå.includes('Ï†ÑÎùºÎ∂ÅÎèÑ')) {
          region = 'Ï†ÑÎùºÎ∂ÅÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ï†ÑÎÇ®') || row.ÌòÑÏ£ºÏÜå.includes('Ï†ÑÎùºÎÇ®ÎèÑ')) {
          region = 'Ï†ÑÎùºÎÇ®ÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Í≤ΩÎ∂Å') || row.ÌòÑÏ£ºÏÜå.includes('Í≤ΩÏÉÅÎ∂ÅÎèÑ')) {
          region = 'Í≤ΩÏÉÅÎ∂ÅÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Í≤ΩÎÇ®') || row.ÌòÑÏ£ºÏÜå.includes('Í≤ΩÏÉÅÎÇ®ÎèÑ')) {
          region = 'Í≤ΩÏÉÅÎÇ®ÎèÑ';
        } else if (row.ÌòÑÏ£ºÏÜå.includes('Ï†úÏ£º')) {
          region = 'Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ';
        }
        regionGroups[region] = (regionGroups[region] || 0) + 1;
      }
    });

    const regionData = Object.entries(regionGroups)
      .sort(([,a], [,b]) => b - a)
      .map(([region, count]) => ({ region, count }));

    // Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨
    const areaGroups = {};
    filteredData.forEach(row => {
      if (row.Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞) {
        const area = parseFloat(row.Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞);
        let areaRange;
        if (area < 100) areaRange = '95.5„é° (29Ìèâ)';
        else if (area < 140) areaRange = '133.65„é° (40Ìèâ)';
        else areaRange = '151.74„é° (46Ìèâ)';
        
        areaGroups[areaRange] = (areaGroups[areaRange] || 0) + 1;
      }
    });

    const areaData = Object.entries(areaGroups).map(([range, count]) => ({
      range,
      count,
      percentage: ((count / total) * 100).toFixed(1),
      color: range.includes('95.5') ? '#10b981' : range.includes('133.65') ? '#ec4899' : '#3b82f6'
    }));

    // ÎåÄÏ∂úÍ∏àÏï°ÎåÄÎ≥Ñ Î∂ÑÌè¨ (ÏñµÎåÄ Îã®ÏúÑÎ°ú Í∑∏Î£πÌôî)
    const loanAmountGroups = {};
    filteredData.forEach(row => {
      if (row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï° && parseFloat(row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°) > 0) {
        const amount = parseFloat(row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°);
        let amountRange;
        if (amount < 100000000) amountRange = '1Ïñµ ÎØ∏Îßå';
        else if (amount < 200000000) amountRange = '1ÏñµÎåÄ';
        else if (amount < 300000000) amountRange = '2ÏñµÎåÄ';
        else if (amount < 400000000) amountRange = '3ÏñµÎåÄ';
        else if (amount < 500000000) amountRange = '4ÏñµÎåÄ';
        else if (amount < 600000000) amountRange = '5ÏñµÎåÄ';
        else if (amount < 700000000) amountRange = '6ÏñµÎåÄ';
        else if (amount < 800000000) amountRange = '7ÏñµÎåÄ';
        else if (amount < 900000000) amountRange = '8ÏñµÎåÄ';
        else if (amount < 1000000000) amountRange = '9ÏñµÎåÄ';
        else amountRange = '10Ïñµ Ïù¥ÏÉÅ';
        
        loanAmountGroups[amountRange] = (loanAmountGroups[amountRange] || 0) + 1;
      }
    });

    const loanAmountData = Object.entries(loanAmountGroups)
      .sort(([a], [b]) => {
        const order = ['1Ïñµ ÎØ∏Îßå', '1ÏñµÎåÄ', '2ÏñµÎåÄ', '3ÏñµÎåÄ', '4ÏñµÎåÄ', '5ÏñµÎåÄ', '6ÏñµÎåÄ', '7ÏñµÎåÄ', '8ÏñµÎåÄ', '9ÏñµÎåÄ', '10Ïñµ Ïù¥ÏÉÅ'];
        return order.indexOf(a) - order.indexOf(b);
      })
      .map(([range, count]) => ({ range, count }));

    // ÎåÄÏ∂ú Ïó¨Î∂Ä ÎπÑÏú® (Í∞úÏÑ†Îêú Î°úÏßÅ)
    const loanCount = filteredData.filter(row => {
      if (!row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°) return false;
      const amount = parseFloat(row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°);
      return !isNaN(amount) && amount > 0;
    }).length;
    const noLoanCount = total - loanCount;
    
    // ÎîîÎ≤ÑÍπÖ: Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('Ï¥ù Ïù∏ÏõêÏàò:', total);
    console.log('ÎåÄÏ∂ú Ïù∏ÏõêÏàò:', loanCount);
    console.log('Î¨¥ÎåÄÏ∂ú Ïù∏ÏõêÏàò:', noLoanCount);
    console.log('Ï¥ùÌï©:', loanCount + noLoanCount);

    const loanStatusData = [
      { name: 'ÎåÄÏ∂ú', value: loanCount, percentage: total ? ((loanCount/total)*100).toFixed(1) : '0', color: '#ef4444' },
      { name: 'Î¨¥ÎåÄÏ∂ú', value: noLoanCount, percentage: total ? ((noLoanCount/total)*100).toFixed(1) : '0', color: '#10b981' }
    ];

    // Ï¥ù Í∑ºÏ†ÄÎãπÏï° Í≥ÑÏÇ∞
    const totalLoanAmount = filteredData.reduce((sum, row) => {
      if (row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï° && parseFloat(row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°) > 0) {
        return sum + parseFloat(row.Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°);
      }
      return sum;
    }, 0);

    // Í∞ÄÍµ¨Îãπ ÌèâÍ∑† Í∑ºÏ†ÄÎãπÏï°
    const averageLoanAmount = loanCount > 0 ? totalLoanAmount / loanCount : 0;

    // Î∂ÄÎèôÏÇ∞ ÌèâÍ∑†Î≥¥Ïú† Í∏∞Í∞Ñ Í≥ÑÏÇ∞ (1ÎÖÑ Îã®ÏúÑÎ°ú ÏÑ∏Î∂ÑÌôî)
    const ownershipPeriods = {};
    filteredData.forEach(row => {
      if (row.ÏÜåÏú†Í∂åÏ∑®ÎìùÏùº) {
        const acquisitionDate = new Date(row.ÏÜåÏú†Í∂åÏ∑®ÎìùÏùº);
        const currentDate = new Date();
        const yearsDiff = (currentDate - acquisitionDate) / (1000 * 60 * 60 * 24 * 365.25);
        
        if (yearsDiff >= 0 && yearsDiff <= 30) { // 0-30ÎÖÑ Î≤îÏúÑÎ°ú Ï†úÌïú
          const years = Math.floor(yearsDiff);
          let periodRange;
          if (years < 1) periodRange = '1ÎÖÑ ÎØ∏Îßå';
          else if (years <= 5) periodRange = `${years}ÎÖÑ`;
          else if (years <= 10) periodRange = `${years}ÎÖÑ`;
          else if (years <= 15) periodRange = `${years}ÎÖÑ`;
          else if (years <= 20) periodRange = `${years}ÎÖÑ`;
          else periodRange = '20ÎÖÑ Ïù¥ÏÉÅ';
          
          ownershipPeriods[periodRange] = (ownershipPeriods[periodRange] || 0) + 1;
        }
      }
    });

    const ownershipPeriodData = Object.entries(ownershipPeriods)
      .sort(([a], [b]) => {
        if (a === '1ÎÖÑ ÎØ∏Îßå') return -1;
        if (b === '1ÎÖÑ ÎØ∏Îßå') return 1;
        if (a === '20ÎÖÑ Ïù¥ÏÉÅ') return 1;
        if (b === '20ÎÖÑ Ïù¥ÏÉÅ') return -1;
        
        const aYear = parseInt(a.replace('ÎÖÑ', ''));
        const bYear = parseInt(b.replace('ÎÖÑ', ''));
        return aYear - bYear;
      })
      .map(([period, count]) => ({ period, count }));

    // Îì±Í∏∞Ïù¥Ï†ÑÏõêÏù∏Î≥Ñ Î∂ÑÌè¨ (Îß§Îß§, ÏÉÅÏÜç, Ï¶ùÏó¨ Îì±)
    const transferReasons = {};
    filteredData.forEach(row => {
      if (row.Ïù¥Ï†ÑÏÇ¨Ïú†) {
        const reason = row.Ïù¥Ï†ÑÏÇ¨Ïú†.trim();
        if (reason) {
          transferReasons[reason] = (transferReasons[reason] || 0) + 1;
        }
      }
    });

    const transferReasonData = Object.entries(transferReasons)
      .sort(([,a], [,b]) => b - a) // Í∞úÏàò Í∏∞Ï§Ä ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨
      .map(([reason, count]) => ({ 
        reason, 
        count,
        percentage: total ? ((count/total)*100).toFixed(1) : '0'
      }));

    // Í±∞Ï£º/Ìà¨Ïûê ÎπÑÏú® Í≥ÑÏÇ∞
    const residenceRate = total > 0 ? (residenceCount / total * 100).toFixed(1) : 0;
    const investmentRate = total > 0 ? (investmentCount / total * 100).toFixed(1) : 0;

    return {
      total,
      ageData,
      residenceCount,
      investmentCount,
      residenceRate,
      investmentRate,
      male,
      female,
      regionData,
      areaData,
      loanAmountData,
      loanStatusData,
      totalLoanAmount,
      averageLoanAmount,
      ownershipPeriodData,
      transferReasonData
    };
  };


  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-emerald-500 mx-auto"></div>
          <p className="mt-4 text-lg text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î°úÎî© Ï§ëÏûÖÎãàÎã§...</p>
        </div>
      </div>
    );
  }

  const stats = statsData[activeTab] || {};
  const tabs = ['Ï†ÑÏ≤¥ÌÜµÍ≥Ñ', 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô', 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô', 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô', 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô'];


  const residenceData = [
    { name: 'Í±∞Ï£º', value: stats.residenceCount || 0, percentage: stats.total ? ((stats.residenceCount/stats.total)*100).toFixed(1) : '0', color: '#10b981' },
    { name: 'Ìà¨Ïûê', value: stats.investmentCount || 0, percentage: stats.total ? ((stats.investmentCount/stats.total)*100).toFixed(1) : '0', color: '#3b82f6' }
  ];

  const genderData = [
    { name: 'ÎÇ®', value: stats.male || 0, color: '#3b82f6' },
    { name: 'Ïó¨', value: stats.female || 0, color: '#ec4899' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Ìó§Îçî */}
      <div className="bg-white border-b px-8 py-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-900">ÎåÄÍµêÏïÑÌååÌä∏ Ï°∞Ìï©Ïõê Î∂ÑÏÑù</h1>
          <div className="flex items-center gap-4">
            {/* ÌååÏùº ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ */}
            <div className="flex items-center gap-2">
              <label className="text-sm font-medium text-gray-700">Îç∞Ïù¥ÌÑ∞ ÌååÏùº:</label>
              <select
                value={currentFileName}
                onChange={(e) => loadCsvFile(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {availableFiles.map(file => (
                  <option key={file} value={file}>{file}</option>
                ))}
              </select>
            </div>
            <button
              onClick={fetchAvailableFiles}
              className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors"
              title="ÌååÏùº Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®"
            >
              üîÑ ÏÉàÎ°úÍ≥†Ïπ®
            </button>
            <button
              onClick={() => setShowUpload(!showUpload)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
            >
              üìÅ CSV ÏóÖÎ°úÎìú
            </button>
          </div>
        </div>
        
        {/* ÌòÑÏû¨ ÌååÏùº Ï†ïÎ≥¥ */}
        {currentFileName && (
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 text-blue-700 rounded-lg">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">ÌòÑÏû¨ Î°úÎìúÎêú ÌååÏùº:</span>
              <span className="text-sm font-mono bg-blue-100 px-2 py-1 rounded">{currentFileName}</span>
              <span className="text-sm text-blue-600">({csvData.length}Í∞ú Î†àÏΩîÎìú)</span>
            </div>
          </div>
        )}
        
        {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
        {error && (
          <div className="mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}
        
        {/* ÌååÏùº ÏóÖÎ°úÎìú ÏòÅÏó≠ */}
        {showUpload && (
          <div className="mt-4">
            <FileUpload 
              onDataLoad={handleDataLoad}
              onError={handleError}
            />
          </div>
        )}
      </div>

      {/* ÌÉ≠ Î©îÎâ¥ */}
      <div className="bg-white border-b px-8">
        <div className="flex space-x-2 overflow-x-auto">
          {tabs.map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-6 py-3 font-medium text-sm whitespace-nowrap rounded-t-lg transition-colors ${
                activeTab === tab
                  ? 'bg-emerald-500 text-white'
                  : 'bg-white text-gray-600 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>
      </div>

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <div className="px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* ÎÇòÏù¥ÎåÄ Î∂ÑÌè¨ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">ÎÇòÏù¥ÎåÄ Î∂ÑÌè¨</h2>
            <div className="text-center text-sm text-gray-600 mb-4">Ï¥ù {stats.total}Î™Ö</div>
            <ResponsiveContainer width="100%" height={280}>
              <BarChart data={stats.ageData || []}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis dataKey="range" tick={{ fontSize: 12 }} />
                <YAxis tick={{ fontSize: 12 }} />
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
                <Bar dataKey="count" fill="#10b981" />
              </BarChart>
            </ResponsiveContainer>
            <div className="text-xs text-gray-500 text-center mt-2">Ïó∞Î†π</div>
          </div>

          {/* Í±∞Ï£º/Ìà¨Ïûê ÎπÑÏú® - Ïó∞Î†πÎåÄÎ≥Ñ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-4 text-center">Í±∞Ï£º/Ìà¨Ïûê ÎπÑÏú®</h2>
            
            {/* Ïó∞Î†πÎåÄÎ≥Ñ ÌÉ≠ */}
            <div className="flex flex-wrap gap-2 mb-4 justify-center">
              {['Ï†ÑÏ≤¥', '20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ', '80ÎåÄ', '90ÎåÄ'].map((ageGroup) => {
                return (
                  <button
                    key={ageGroup}
                    onClick={() => setSelectedAgeGroup(ageGroup)}
                    className={`px-3 py-1 text-xs rounded-full transition-colors ${
                      selectedAgeGroup === ageGroup
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {ageGroup}
                  </button>
                );
              })}
            </div>
            
            {/* ÏÑ†ÌÉùÎêú Ïó∞Î†πÎåÄÏùò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {(() => {
              // ÌòÑÏû¨ ÌÉ≠Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
              const currentData = activeTab === 'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ' ? csvData : 
                csvData.filter(row => {
                  const building = row.Í±¥Î¨ºÎ™Ö || '';
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô') return building.includes('1Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô') return building.includes('2Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô') return building.includes('3Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô') return building.includes('4Îèô');
                  return false;
                });
              const ageData = getAgeGroupResidenceData(currentData, selectedAgeGroup);
              const ageResidenceData = [
                { 
                  name: 'Í±∞Ï£º', 
                  value: ageData.residence, 
                  color: '#10b981',
                  percentage: ageData.residenceRate
                },
                { 
                  name: 'Ìà¨Ïûê', 
                  value: ageData.investment, 
                  color: '#3b82f6',
                  percentage: ageData.investmentRate
                }
              ];
              
              return (
                <>
                  <div className="text-center text-sm text-gray-600 mb-4">
                    Ï¥ù {ageData.total}Î™Ö ({selectedAgeGroup})
                  </div>
            <div className="flex items-center justify-center gap-8">
                <ResponsiveContainer width="60%" height={300}>
              <PieChart>
                <Pie
                          data={ageResidenceData}
                  cx="50%"
                  cy="50%"
                  innerRadius={50}
                  outerRadius={90}
                  paddingAngle={2}
                  dataKey="value"
                >
                          {ageResidenceData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
              </PieChart>
            </ResponsiveContainer>
              <div className="flex-1 space-y-2">
                {ageResidenceData.map((entry, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <div className="w-4 h-4 rounded" style={{ backgroundColor: entry.color }}></div>
                    <span className="text-sm font-medium">{entry.name}</span>
                    <span className="text-sm text-gray-600">{entry.value}Î™Ö</span>
                    <span className="text-sm text-gray-500">({entry.percentage}%)</span>
              </div>
                ))}
              </div>
            </div>
                </>
              );
            })()}
          </div>

          {/* Ìà¨ÏûêÏûê Í±∞Ï£ºÏßÄÏó≠ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">Ìà¨ÏûêÏûê Í±∞Ï£ºÏßÄÏó≠</h2>
            <div className="text-center text-sm text-gray-600 mb-4">Ï¥ù {stats.investmentCount}Î™Ö (Ìà¨ÏûêÏûê ÌòÑÏ£ºÏÜå Í∏∞Ï§Ä)</div>
            <ResponsiveContainer width="100%" height={280}>
              <BarChart data={stats.regionData || []} layout="vertical">
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis type="number" tick={{ fontSize: 10 }} />
                <YAxis dataKey="region" type="category" width={85} tick={{ fontSize: 10 }} />
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
                <Bar dataKey="count" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
            <div className="text-xs text-gray-500 text-center mt-2">ÏßÄÏó≠Î≥Ñ</div>
          </div>

          {/* Ïó∞ÎèÑÎ≥Ñ ÏÜåÏú†Í∂å Î≥ÄÎèô */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">Ïó∞ÎèÑÎ≥Ñ ÏÜåÏú†Í∂å Î≥ÄÎèô</h2>
            
            {/* Ïó∞Î†πÎåÄÎ≥Ñ ÌÉ≠ */}
            <div className="flex flex-wrap gap-2 mb-4 justify-center">
              {['Ï†ÑÏ≤¥', '20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ', '80ÎåÄ', '90ÎåÄ'].map((ageGroup) => {
                return (
                  <button
                    key={ageGroup}
                    onClick={() => setSelectedAgeGroupOwnership(ageGroup)}
                    className={`px-3 py-1 text-xs rounded-full transition-colors ${
                      selectedAgeGroupOwnership === ageGroup
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {ageGroup}
                  </button>
                );
              })}
            </div>

            {/* ÏÑ†ÌÉùÎêú Ïó∞Î†πÎåÄÏùò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {(() => {
              // ÌòÑÏû¨ ÌÉ≠Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
              const currentData = activeTab === 'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ' ? csvData : 
                csvData.filter(row => {
                  const building = row.Í±¥Î¨ºÎ™Ö || '';
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô') return building.includes('1Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô') return building.includes('2Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô') return building.includes('3Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô') return building.includes('4Îèô');
                  return false;
                });
              
              // Ïó∞Î†πÎåÄÎ≥Ñ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
              const filteredData = selectedAgeGroupOwnership === 'Ï†ÑÏ≤¥' ? currentData : 
                currentData.filter(row => {
                  if (!row.Ï£ºÎØºÎ≤àÌò∏ || row.Ï£ºÎØºÎ≤àÌò∏.length < 7) return false;
                  const birthYear = parseInt(row.Ï£ºÎØºÎ≤àÌò∏.substring(0, 2));
                  const currentYear = new Date().getFullYear();
                  let fullBirthYear;
                  
                  if (birthYear <= 30) {
                    fullBirthYear = 2000 + birthYear;
                  } else {
                    fullBirthYear = 1900 + birthYear;
                  }
                  
                  const age = currentYear - fullBirthYear;
                  const ageGroup = selectedAgeGroupOwnership;
                  
                  if (ageGroup === '20ÎåÄ') return age >= 20 && age < 30;
                  if (ageGroup === '30ÎåÄ') return age >= 30 && age < 40;
                  if (ageGroup === '40ÎåÄ') return age >= 40 && age < 50;
                  if (ageGroup === '50ÎåÄ') return age >= 50 && age < 60;
                  if (ageGroup === '60ÎåÄ') return age >= 60 && age < 70;
                  if (ageGroup === '70ÎåÄ') return age >= 70 && age < 80;
                  if (ageGroup === '80ÎåÄ') return age >= 80 && age < 90;
                  if (ageGroup === '90ÎåÄ') return age >= 90;
                  
                  return true;
                });
              
              // ÏÜåÏú†Í∂å Î≥ÄÎèô Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (ÏÜåÏú†Í∂åÏ∑®ÎìùÏùº Í∏∞Ï§Ä) - 2003ÎÖÑÎ∂ÄÌÑ∞ 2025ÎÖÑÍπåÏßÄ 1ÎÖÑ Îã®ÏúÑ
              const ownershipChanges = {};
              filteredData.forEach(row => {
                const acquisitionDate = row['ÏÜåÏú†Í∂åÏ∑®ÎìùÏùº'];
                if (acquisitionDate && acquisitionDate !== '') {
                  const year = parseInt(acquisitionDate.split('-')[0]);
                  if (year >= 2003 && year <= 2025) {
                    ownershipChanges[year] = (ownershipChanges[year] || 0) + 1;
                  }
                }
              });
              
              // 2003ÎÖÑÎ∂ÄÌÑ∞ 2025ÎÖÑÍπåÏßÄ Î™®Îì† Ïó∞ÎèÑ Ï¥àÍ∏∞Ìôî
              const allYears = [];
              for (let year = 2003; year <= 2025; year++) {
                allYears.push({ year: year.toString(), count: ownershipChanges[year] || 0 });
              }
              
              const ownershipData = allYears;
              
              console.log('ÏÜåÏú†Í∂å Î≥ÄÎèô Îç∞Ïù¥ÌÑ∞:', { currentData: currentData.length, filteredData: filteredData.length, ownershipData });
              
              return (
                <>
                  <div className="text-center text-sm text-gray-600 mb-4">
                    Ï¥ù {filteredData.length}Í±¥ ({selectedAgeGroupOwnership})
                  </div>
            <ResponsiveContainer width="100%" height={280}>
                    <BarChart data={ownershipData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="year" 
                        tick={{ fontSize: 8 }} 
                  angle={-45}
                  textAnchor="end"
                  height={70}
                        interval={0}
                />
                <YAxis tick={{ fontSize: 11 }} />
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
                <Bar dataKey="count" fill="#10b981" />
              </BarChart>
            </ResponsiveContainer>
                  <div className="text-xs text-gray-500 text-center mt-2">Í∏∞Í∞Ñ</div>
                </>
              );
            })()}
          </div>

          {/* ÏÑ±Î≥Ñ Î∂ÑÌè¨ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">ÏÑ±Î≥Ñ Î∂ÑÌè¨</h2>
            <div className="text-center text-sm text-gray-600 mb-4">Ï¥ù {stats.total}Î™Ö</div>
            <div className="flex items-center justify-center gap-8">
                <ResponsiveContainer width="60%" height={300}>
              <PieChart>
                <Pie
                  data={genderData}
                  cx="50%"
                  cy="50%"
                    innerRadius={50}
                  outerRadius={90}
                  dataKey="value"
                >
                  {genderData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
              </PieChart>
            </ResponsiveContainer>
              <div className="flex-1 space-y-2">
                {genderData.map((entry, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <div className="w-4 h-4 rounded" style={{ backgroundColor: entry.color }}></div>
                    <span className="text-sm font-medium">{entry.name}</span>
                    <span className="text-sm text-gray-600">{entry.value}Î™Ö</span>
                    <span className="text-sm text-gray-500">({((entry.value / stats.total) * 100).toFixed(1)}%)</span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">Î©¥Ï†ÅÎ≥Ñ Î∂ÑÌè¨</h2>
            
            {/* Ïó∞Î†πÎåÄÎ≥Ñ ÌÉ≠ */}
            <div className="flex flex-wrap gap-2 mb-4 justify-center">
              {['Ï†ÑÏ≤¥', '20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ', '80ÎåÄ', '90ÎåÄ'].map((ageGroup) => {
                return (
                  <button
                    key={ageGroup}
                    onClick={() => setSelectedAgeGroupArea(ageGroup)}
                    className={`px-3 py-1 text-xs rounded-full transition-colors ${
                      selectedAgeGroupArea === ageGroup
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {ageGroup}
                  </button>
                );
              })}
            </div>

            {/* ÏÑ†ÌÉùÎêú Ïó∞Î†πÎåÄÏùò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {(() => {
              // ÌòÑÏû¨ ÌÉ≠Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
              const currentData = activeTab === 'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ' ? csvData : 
                csvData.filter(row => {
                  const building = row.Í±¥Î¨ºÎ™Ö || '';
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô') return building.includes('1Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô') return building.includes('2Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô') return building.includes('3Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô') return building.includes('4Îèô');
                  return false;
                });
              
              // Ïó∞Î†πÎåÄÎ≥Ñ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
              const filteredData = selectedAgeGroupArea === 'Ï†ÑÏ≤¥' ? currentData : 
                currentData.filter(row => {
                  if (!row.Ï£ºÎØºÎ≤àÌò∏ || row.Ï£ºÎØºÎ≤àÌò∏.length < 7) return false;
                  const birthYear = parseInt(row.Ï£ºÎØºÎ≤àÌò∏.substring(0, 2));
                  const currentYear = new Date().getFullYear();
                  let fullBirthYear;
                  
                  if (birthYear <= 30) {
                    fullBirthYear = 2000 + birthYear;
                  } else {
                    fullBirthYear = 1900 + birthYear;
                  }
                  
                  const age = currentYear - fullBirthYear;
                  const ageGroup = selectedAgeGroupArea;
                  
                  if (ageGroup === '20ÎåÄ') return age >= 20 && age < 30;
                  if (ageGroup === '30ÎåÄ') return age >= 30 && age < 40;
                  if (ageGroup === '40ÎåÄ') return age >= 40 && age < 50;
                  if (ageGroup === '50ÎåÄ') return age >= 50 && age < 60;
                  if (ageGroup === '60ÎåÄ') return age >= 60 && age < 70;
                  if (ageGroup === '70ÎåÄ') return age >= 70 && age < 80;
                  if (ageGroup === '80ÎåÄ') return age >= 80 && age < 90;
                  if (ageGroup === '90ÎåÄ') return age >= 90;
                  
                  return true;
                });
              
              // Î©¥Ï†ÅÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
              const areas = {};
              filteredData.forEach(row => {
                const area = parseFloat(row['Ï†ÑÏö©Î©¥Ï†Å_Ï†úÍ≥±ÎØ∏ÌÑ∞']) || 0;
                if (area > 0) {
                  const areaKey = `${area}„é°`;
                  areas[areaKey] = (areas[areaKey] || 0) + 1;
                }
              });
              
              const areaData = Object.entries(areas)
                .map(([area, count]) => {
                  const total = filteredData.length;
                  const percentage = total > 0 ? ((count / total) * 100).toFixed(1) : 0;
                  return { area, count, percentage };
                })
                .sort((a, b) => b.count - a.count);
              
              console.log('Î©¥Ï†ÅÎ≥Ñ Îç∞Ïù¥ÌÑ∞:', { currentData: currentData.length, filteredData: filteredData.length, areaData });
              
              return (
                <>
                  <div className="text-center text-sm text-gray-600 mb-4">
                    Ï¥ù {filteredData.length}ÏÑ∏ÎåÄ ({selectedAgeGroupArea})
                  </div>
                  <div className="flex items-center justify-center gap-8">
                    <ResponsiveContainer width="60%" height={300}>
              <PieChart>
                <Pie
                          data={areaData}
                  cx="50%"
                  cy="50%"
                          innerRadius={50}
                  outerRadius={90}
                  dataKey="count"
                        >
                          {areaData.map((entry, index) => {
                            const colors = ['#10b981', '#3b82f6', '#f59e0b', '#8b5cf6', '#ec4899', '#ef4444'];
                            return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;
                          })}
                </Pie>
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
              </PieChart>
            </ResponsiveContainer>
                    
                    <div className="flex-1 space-y-2">
                      {areaData.map((entry, index) => {
                        const colors = ['#10b981', '#3b82f6', '#f59e0b', '#8b5cf6', '#ec4899', '#ef4444'];
                        return (
                          <div key={index} className="flex items-center gap-3">
                            <div 
                              className="w-4 h-4 rounded" 
                              style={{ backgroundColor: colors[index % colors.length] }}
                            ></div>
                            <span className="text-sm text-gray-800 whitespace-nowrap">
                              {entry.area} ¬∑ {entry.count}ÏÑ∏ÎåÄ ({entry.percentage}%)
                            </span>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </>
              );
            })()}
          </div>

          {/* Î∂ÄÎèôÏÇ∞ ÌèâÍ∑†Î≥¥Ïú† Í∏∞Í∞Ñ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">Î∂ÄÎèôÏÇ∞ ÌèâÍ∑†Î≥¥Ïú† Í∏∞Í∞Ñ</h2>
            <div className="text-center text-sm text-gray-600 mb-4">ÏÜåÏú†Í∂åÏ∑®ÎìùÏùº Í∏∞Ï§Ä</div>
            <ResponsiveContainer width="100%" height={280}>
              <BarChart data={stats.ownershipPeriodData || []}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis dataKey="period" tick={{ fontSize: 10 }} />
                <YAxis tick={{ fontSize: 12 }} />
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
                <Bar dataKey="count" fill="#8b5cf6" />
              </BarChart>
            </ResponsiveContainer>
            <div className="text-xs text-gray-500 text-center mt-2">Î≥¥Ïú† Í∏∞Í∞Ñ</div>
          </div>

          {/* Îì±Í∏∞Ïù¥Ï†ÑÏõêÏù∏Î≥Ñ Î∂ÑÌè¨ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">Îì±Í∏∞Ïù¥Ï†ÑÏõêÏù∏Î≥Ñ Î∂ÑÌè¨</h2>
            
            {/* Ïó∞Î†πÎåÄÎ≥Ñ ÌÉ≠ */}
            <div className="flex flex-wrap gap-2 mb-4 justify-center">
              {['Ï†ÑÏ≤¥', '20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ', '80ÎåÄ', '90ÎåÄ'].map((ageGroup) => {
                return (
                  <button
                    key={ageGroup}
                    onClick={() => setSelectedAgeGroupReason(ageGroup)}
                    className={`px-3 py-1 text-xs rounded-full transition-colors ${
                      selectedAgeGroupReason === ageGroup
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {ageGroup}
                  </button>
                );
              })}
            </div>

            {/* ÏÑ†ÌÉùÎêú Ïó∞Î†πÎåÄÏùò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {(() => {
              // ÌòÑÏû¨ ÌÉ≠Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
              const currentData = activeTab === 'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ' ? csvData : 
                csvData.filter(row => {
                  const building = row.Í±¥Î¨ºÎ™Ö || '';
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô') return building.includes('1Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô') return building.includes('2Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô') return building.includes('3Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô') return building.includes('4Îèô');
                  return false;
                });
              
              // Ïó∞Î†πÎåÄÎ≥Ñ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
              const filteredData = selectedAgeGroupReason === 'Ï†ÑÏ≤¥' ? currentData : 
                currentData.filter(row => {
                  if (!row.Ï£ºÎØºÎ≤àÌò∏ || row.Ï£ºÎØºÎ≤àÌò∏.length < 7) return false;
                  const birthYear = parseInt(row.Ï£ºÎØºÎ≤àÌò∏.substring(0, 2));
                  const currentYear = new Date().getFullYear();
                  let fullBirthYear;
                  
                  if (birthYear <= 30) {
                    fullBirthYear = 2000 + birthYear;
                  } else {
                    fullBirthYear = 1900 + birthYear;
                  }
                  
                  const age = currentYear - fullBirthYear;
                  const ageGroup = selectedAgeGroupReason;
                  
                  if (ageGroup === '20ÎåÄ') return age >= 20 && age < 30;
                  if (ageGroup === '30ÎåÄ') return age >= 30 && age < 40;
                  if (ageGroup === '40ÎåÄ') return age >= 40 && age < 50;
                  if (ageGroup === '50ÎåÄ') return age >= 50 && age < 60;
                  if (ageGroup === '60ÎåÄ') return age >= 60 && age < 70;
                  if (ageGroup === '70ÎåÄ') return age >= 70 && age < 80;
                  if (ageGroup === '80ÎåÄ') return age >= 80 && age < 90;
                  if (ageGroup === '90ÎåÄ') return age >= 90;
                  
                  return true;
                });
              
              // Îì±Í∏∞Ïù¥Ï†ÑÏõêÏù∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
              const transferReasons = {};
              filteredData.forEach(row => {
                if (row.Ïù¥Ï†ÑÏÇ¨Ïú†) {
                  const reason = row.Ïù¥Ï†ÑÏÇ¨Ïú†.trim();
                  if (reason) {
                    transferReasons[reason] = (transferReasons[reason] || 0) + 1;
                  }
                }
              });
              
              const reasonData = Object.entries(transferReasons)
                .map(([reason, count]) => {
                  const total = filteredData.length;
                  const percentage = total > 0 ? ((count / total) * 100).toFixed(1) : 0;
                  return { reason, count, percentage };
                })
                .sort((a, b) => b.count - a.count);
              
              console.log('Îì±Í∏∞Ïù¥Ï†ÑÏõêÏù∏ Îç∞Ïù¥ÌÑ∞:', { currentData: currentData.length, filteredData: filteredData.length, reasonData });
              
              return (
                <>
                  <div className="text-center text-sm text-gray-600 mb-4">
                    Ï¥ù {filteredData.length}Í±¥ ({selectedAgeGroupReason})
                  </div>
                  <div className="flex items-center justify-center gap-8">
                    <ResponsiveContainer width="60%" height={300}>
              <PieChart>
                <Pie
                          data={reasonData}
                  cx="50%"
                  cy="50%"
                          innerRadius={50}
                  outerRadius={90}
                  dataKey="count"
                >
                          {reasonData.map((entry, index) => {
                    const colors = ['#ef4444', '#10b981', '#3b82f6', '#f59e0b', '#8b5cf6', '#ec4899'];
                    return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;
                  })}
                </Pie>
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
              </PieChart>
            </ResponsiveContainer>
                    <div className="flex-1 space-y-2">
                      {reasonData.map((entry, index) => {
                        const colors = ['#ef4444', '#10b981', '#3b82f6', '#f59e0b', '#8b5cf6', '#ec4899'];
                        return (
                          <div key={index} className="flex items-center gap-3">
                            <div className="w-4 h-4 rounded" style={{ backgroundColor: colors[index % colors.length] }}></div>
                            <span className="text-sm font-medium">{entry.reason}</span>
                            <span className="text-sm text-gray-600">{entry.count}Í±¥</span>
                            <span className="text-sm text-gray-500">({entry.percentage}%)</span>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </>
              );
            })()}
          </div>

          {/* ÎåÄÏ∂úÍ∏àÏï°ÎåÄÎ≥Ñ Î∂ÑÌè¨ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">ÎåÄÏ∂úÍ∏àÏï°ÎåÄÎ≥Ñ Î∂ÑÌè¨</h2>
            
            {/* Ïó∞Î†πÎåÄÎ≥Ñ ÌÉ≠ */}
            <div className="flex flex-wrap gap-2 mb-4 justify-center">
              {['Ï†ÑÏ≤¥', '20ÎåÄ', '30ÎåÄ', '40ÎåÄ', '50ÎåÄ', '60ÎåÄ', '70ÎåÄ', '80ÎåÄ', '90ÎåÄ'].map((ageGroup) => {
                return (
                  <button
                    key={ageGroup}
                    onClick={() => setSelectedAgeGroupLoan(ageGroup)}
                    className={`px-3 py-1 text-xs rounded-full transition-colors ${
                      selectedAgeGroupLoan === ageGroup
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {ageGroup}
                  </button>
                );
              })}
            </div>

            {/* ÏÑ†ÌÉùÎêú Ïó∞Î†πÎåÄÏùò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {(() => {
              // ÌòÑÏû¨ ÌÉ≠Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
              const currentData = activeTab === 'Ï†ÑÏ≤¥ÌÜµÍ≥Ñ' ? csvData : 
                csvData.filter(row => {
                  const building = row.Í±¥Î¨ºÎ™Ö || '';
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 1Îèô') return building.includes('1Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 2Îèô') return building.includes('2Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 3Îèô') return building.includes('3Îèô');
                  if (activeTab === 'ÎåÄÍµêÏïÑÌååÌä∏ 4Îèô') return building.includes('4Îèô');
                  return false;
                });
              
              // Ïó∞Î†πÎåÄÎ≥Ñ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
              const filteredData = selectedAgeGroupLoan === 'Ï†ÑÏ≤¥' ? currentData : 
                currentData.filter(row => {
                  if (!row.Ï£ºÎØºÎ≤àÌò∏ || row.Ï£ºÎØºÎ≤àÌò∏.length < 7) return false;
                  const birthYear = parseInt(row.Ï£ºÎØºÎ≤àÌò∏.substring(0, 2));
                  const currentYear = new Date().getFullYear();
                  let fullBirthYear;
                  
                  if (birthYear <= 30) {
                    fullBirthYear = 2000 + birthYear;
                  } else {
                    fullBirthYear = 1900 + birthYear;
                  }
                  
                  const age = currentYear - fullBirthYear;
                  const ageGroup = selectedAgeGroupLoan;
                  
                  if (ageGroup === '20ÎåÄ') return age >= 20 && age < 30;
                  if (ageGroup === '30ÎåÄ') return age >= 30 && age < 40;
                  if (ageGroup === '40ÎåÄ') return age >= 40 && age < 50;
                  if (ageGroup === '50ÎåÄ') return age >= 50 && age < 60;
                  if (ageGroup === '60ÎåÄ') return age >= 60 && age < 70;
                  if (ageGroup === '70ÎåÄ') return age >= 70 && age < 80;
                  if (ageGroup === '80ÎåÄ') return age >= 80 && age < 90;
                  if (ageGroup === '90ÎåÄ') return age >= 90;
                  
                  return true;
                });
              
              // ÎåÄÏ∂úÍ∏àÏï° Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
              const loanRanges = {
                '1Ïñµ ÎØ∏Îßå': 0,
                '1ÏñµÎåÄ': 0,
                '2ÏñµÎåÄ': 0,
                '3ÏñµÎåÄ': 0,
                '4ÏñµÎåÄ': 0,
                '5ÏñµÎåÄ': 0,
                '6ÏñµÎåÄ': 0,
                '7ÏñµÎåÄ': 0,
                '8ÏñµÎåÄ': 0,
                '9ÏñµÎåÄ': 0,
                '10Ïñµ Ïù¥ÏÉÅ': 0
              };
              
              let loanCount = 0; // Ïã§Ï†ú ÎåÄÏ∂úÏù¥ ÏûàÎäî Í±¥Ïàò
              filteredData.forEach(row => {
                const loanAmount = parseFloat(row['Í∑ºÏ†ÄÎãπÏï°'] || row['Ïú†Ìö®Í∑ºÏ†ÄÎãπÏ¥ùÏï°'] || row['Í∑ºÏ†ÄÎãπÏ¥ùÏï°']) || 0;
                if (loanAmount > 0) {
                  loanCount++;
                  if (loanAmount < 100000000) {
                    loanRanges['1Ïñµ ÎØ∏Îßå']++;
                  } else if (loanAmount < 200000000) {
                    loanRanges['1ÏñµÎåÄ']++;
                  } else if (loanAmount < 300000000) {
                    loanRanges['2ÏñµÎåÄ']++;
                  } else if (loanAmount < 400000000) {
                    loanRanges['3ÏñµÎåÄ']++;
                  } else if (loanAmount < 500000000) {
                    loanRanges['4ÏñµÎåÄ']++;
                  } else if (loanAmount < 600000000) {
                    loanRanges['5ÏñµÎåÄ']++;
                  } else if (loanAmount < 700000000) {
                    loanRanges['6ÏñµÎåÄ']++;
                  } else if (loanAmount < 800000000) {
                    loanRanges['7ÏñµÎåÄ']++;
                  } else if (loanAmount < 900000000) {
                    loanRanges['8ÏñµÎåÄ']++;
                  } else if (loanAmount < 1000000000) {
                    loanRanges['9ÏñµÎåÄ']++;
                  } else {
                    loanRanges['10Ïñµ Ïù¥ÏÉÅ']++;
                  }
                }
              });
              
              const loanData = Object.entries(loanRanges)
                .map(([range, count]) => ({ range, count }))
                .sort((a, b) => {
                  const order = ['1Ïñµ ÎØ∏Îßå', '1ÏñµÎåÄ', '2ÏñµÎåÄ', '3ÏñµÎåÄ', '4ÏñµÎåÄ', '5ÏñµÎåÄ', '6ÏñµÎåÄ', '7ÏñµÎåÄ', '8ÏñµÎåÄ', '9ÏñµÎåÄ', '10Ïñµ Ïù¥ÏÉÅ'];
                  return order.indexOf(a.range) - order.indexOf(b.range);
                });
              
              console.log('ÎåÄÏ∂úÍ∏àÏï° Îç∞Ïù¥ÌÑ∞:', { currentData: currentData.length, filteredData: filteredData.length, loanCount, loanData });
              
              return (
                <>
                  <div className="text-center text-sm text-gray-600 mb-4">
                    Ï¥ù {loanCount}Î™Ö (ÎåÄÏ∂úÏûê Í∏∞Ï§Ä, {selectedAgeGroupLoan})
                  </div>
            <ResponsiveContainer width="100%" height={280}>
                    <BarChart data={loanData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis dataKey="range" tick={{ fontSize: 10 }} />
                <YAxis tick={{ fontSize: 12 }} />
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
                <Bar dataKey="count" fill="#ef4444" />
              </BarChart>
            </ResponsiveContainer>
            <div className="text-xs text-gray-500 text-center mt-2">ÎåÄÏ∂úÍ∏àÏï°</div>
                </>
              );
            })()}
          </div>

          {/* ÎåÄÏ∂ú Ïó¨Î∂Ä ÎπÑÏú® */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2 text-center">ÎåÄÏ∂ú Ïó¨Î∂Ä ÎπÑÏú®</h2>
            <div className="text-center text-sm text-gray-600 mb-4">Ï¥ù {stats.total}Î™Ö</div>
            <div className="flex items-center justify-center gap-8">
                <ResponsiveContainer width="60%" height={300}>
              <PieChart>
                <Pie
                  data={stats.loanStatusData || []}
                  cx="50%"
                  cy="50%"
                  innerRadius={50}
                  outerRadius={90}
                  paddingAngle={2}
                  dataKey="value"
                >
                  {(stats.loanStatusData || []).map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                         <Tooltip 
                           contentStyle={{
                             backgroundColor: '#000000',
                             color: '#ffffff',
                             border: 'none',
                             borderRadius: '8px',
                             fontSize: '12px'
                           }}
                         />
              </PieChart>
            </ResponsiveContainer>
              <div className="flex-1 space-y-2">
                {(stats.loanStatusData || []).map((entry, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <div className="w-4 h-4 rounded" style={{ backgroundColor: entry.color }}></div>
                    <span className="text-sm font-medium">{entry.name}</span>
                    <span className="text-sm text-gray-600">{entry.value}Î™Ö</span>
                    <span className="text-sm text-gray-500">({entry.percentage}%)</span>
                  </div>
                ))}
              </div>
            </div>
            <div className="mt-2 flex justify-center gap-6">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-red-500 rounded"></div>
                <span className="text-xs">ÎåÄÏ∂ú</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-emerald-500 rounded"></div>
                <span className="text-xs">Î¨¥ÎåÄÏ∂ú</span>
              </div>
            </div>
          </div>
        </div>

        {/* Ï∂îÍ∞Ä ÌÜµÍ≥Ñ Ïπ¥Îìú */}
        <div className="grid grid-cols-2 md:grid-cols-6 gap-6 mt-6">
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">Ï¥ù ÏÑ∏ÎåÄÏàò</div>
            <div className="text-3xl font-bold text-gray-900">{stats.total}</div>
            <div className="text-xs text-gray-400 mt-1">ÏÑ∏ÎåÄ</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">Í±∞Ï£º</div>
            <div className="text-3xl font-bold text-emerald-600">{stats.residenceCount}</div>
            <div className="text-xs text-gray-400 mt-1">{residenceData[0].percentage}%</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">Ìà¨Ïûê</div>
            <div className="text-3xl font-bold text-blue-600">{stats.investmentCount}</div>
            <div className="text-xs text-gray-400 mt-1">{residenceData[1].percentage}%</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">Ï¥ù Í∑ºÏ†ÄÎãπÏï°</div>
            <div className="text-2xl font-bold text-red-600">{stats.totalLoanAmount ? (stats.totalLoanAmount / 100000000).toFixed(1) : '0'}</div>
            <div className="text-xs text-gray-400 mt-1">ÏñµÏõê</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">Í∞ÄÍµ¨Îãπ ÌèâÍ∑†</div>
            <div className="text-2xl font-bold text-orange-600">{stats.averageLoanAmount ? (stats.averageLoanAmount / 100000000).toFixed(1) : '0'}</div>
            <div className="text-xs text-gray-400 mt-1">ÏñµÏõê</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-sm text-gray-500 mb-2">ÏÑ†ÌÉù ÌÉ≠</div>
            <div className="text-xl font-bold text-purple-600">{activeTab}</div>
            <div className="text-xs text-gray-400 mt-1">ÌòÑÏû¨ Î≥¥Í∏∞</div>
          </div>
        </div>

        {/* AI Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏÑπÏÖò */}
        <div className="mt-8">
          <div className="bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl shadow-xl p-8 text-white">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <h2 className="text-3xl font-bold mb-2 flex items-center gap-3">
                  <span className="text-4xl">ü§ñ</span>
                  AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú
                </h2>
                <p className="text-emerald-100 text-lg">
                  Google GeminiÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÏó¨ Ï†ÑÎ¨∏Í∞Ä ÏàòÏ§ÄÏùò Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§
                </p>
                <div className="mt-4 flex items-center gap-4 text-sm">
                  <div className="flex items-center gap-2 bg-white/20 px-3 py-1.5 rounded-full">
                    <span>‚ö°</span>
                    <span>ÏïΩ 3-5Ï¥à ÏÜåÏöî</span>
                  </div>
                  <div className="flex items-center gap-2 bg-white/20 px-3 py-1.5 rounded-full">
                    <span>üìä</span>
                    <span>ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ Ìè¨Ìï®</span>
                  </div>
                  <div className="flex items-center gap-2 bg-white/20 px-3 py-1.5 rounded-full">
                    <span>üí°</span>
                    <span>ÎßûÏ∂§Ìòï Ï†úÏñ∏</span>
                  </div>
                </div>
              </div>
              
              <button
                className={`ml-8 px-8 py-4 rounded-xl font-bold text-lg transition-all transform shadow-2xl ${
                  isGeneratingReport
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-white text-emerald-600 hover:bg-emerald-50 hover:scale-105'
                }`}
                onClick={handleGenerateReport}
                disabled={isGeneratingReport}
              >
                {isGeneratingReport ? (
                  <span className="flex items-center gap-3">
                    <svg className="animate-spin h-6 w-6" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                    </svg>
                    <span>AI Î∂ÑÏÑù Ï§ë...</span>
                  </span>
                ) : (
                  <span className="flex items-center gap-3">
                    <span className="text-2xl">üìÑ</span>
                    <span>Î≥¥Í≥†ÏÑú ÏÉùÏÑ±ÌïòÍ∏∞</span>
                  </span>
                )}
              </button>
            </div>

            {/* ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î∂ÑÏÑù ÎåÄÏÉÅ */}
            <div className="mt-6 pt-6 border-t border-emerald-400/30">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="bg-white/20 px-4 py-2 rounded-lg">
                    <div className="text-emerald-100 text-xs mb-1">Î∂ÑÏÑù ÎåÄÏÉÅ</div>
                    <div className="text-white text-xl font-bold">{activeTab}</div>
                  </div>
                  <div className="bg-white/20 px-4 py-2 rounded-lg">
                    <div className="text-emerald-100 text-xs mb-1">Ï¥ù ÏÑ∏ÎåÄÏàò</div>
                    <div className="text-white text-xl font-bold">{stats.total || 0}ÏÑ∏ÎåÄ</div>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-emerald-100 text-sm mb-1">Î≥¥Í≥†ÏÑúÏóê Ìè¨Ìï®ÎêòÎäî ÎÇ¥Ïö©</div>
                  <div className="flex gap-2 text-xs">
                    <span className="bg-white/20 px-2 py-1 rounded">üìä ÌÜµÍ≥Ñ</span>
                    <span className="bg-white/20 px-2 py-1 rounded">ü§ñ AI Î∂ÑÏÑù</span>
                    <span className="bg-white/20 px-2 py-1 rounded">üí° Ï†úÏñ∏</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
